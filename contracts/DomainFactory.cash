pragma cashscript ^0.11.0;

contract DomainFactory(
  bytes domainContractBytecode,
  bytes4 minWaitTime,
  int maxPlatformFeePercentage
) {
  /**
   * This function finalizes a domain registration auction by:
   * - Verifying the auction has ended and the winner's bid is valid
   * - Issuing an immutable externalAuth NFT to the domain contract
   * - Issuing an immutable internalAuth NFT to the domain contract
   * - Issuing an immutable domain NFT to the auction winner
   * - Distributing auction fees between the platform and miners
   *
   * `domainContractBytecode` - Partial bytecode of the domain contract
   * `minWaitTime` - Minimum wait time to consider an auction ended
   * `maxPlatformFeePercentage` - Maximum platform fee percentage
   *
   * @inputs
   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: Minting NFT from the Registry contract
   * - Input3: auctionNFT
   *
   * @outputs
   * - Output0: Registry Contract's immutable NFT back to the Registry contract
   * - Output1: Input1 back to this contract without any change
   * - Output2: Minting NFT back to the Registry contract
   * - Output3: External Auth NFT to the domain contract
   * - Output4: Internal Auth NFT to the domain contract
   * - Output5: Domain NFT to the auction winner
   * - Output6: Platform fee (only for the first 4 years)
   *
   */
  function call(){
    require(tx.version == 2);
    require(tx.inputs.length == 4);

    // This contract can only be used at input1 and it should return to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    require(tx.inputs[this.activeInputIndex].value == tx.outputs[this.activeInputIndex].value);

    // Lock this contract to only be used with the registry type contract.
    bytes parentContractScriptHash = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == parentContractScriptHash);
    require(tx.inputs[3].lockingBytecode == parentContractScriptHash);

    bytes parentCategory = tx.inputs[0].tokenCategory;
    // To prevent minting.
    require(tx.outputs[this.activeInputIndex].tokenCategory != parentCategory);

    require(tx.outputs[3].tokenCategory == parentCategory);
    require(tx.outputs[4].tokenCategory == parentCategory);
    require(tx.outputs[5].tokenCategory == parentCategory);
    require(tx.inputs[2].tokenCategory.split(32)[0] == parentCategory);

    bytes auctionCategory, bytes auctionCapability = tx.inputs[3].tokenCategory.split(32);
    require(auctionCategory == parentCategory);
    require(auctionCapability == 0x01); // Mutable

    // Enforce strict restrictions on minting NFT.
    require(tx.inputs[2].tokenCategory == tx.outputs[2].tokenCategory);
    require(tx.inputs[2].nftCommitment == tx.outputs[2].nftCommitment);
    require(tx.inputs[2].nftCommitment == 0x);
    require(tx.inputs[2].tokenAmount == 0);
    require(tx.inputs[2].tokenAmount == tx.outputs[2].tokenAmount);
    require(tx.inputs[2].value == tx.outputs[2].value);

    // If CSV is specified in terms of blocks, then so must nSequence.
    // https://documentation.cash/protocol/forks/bip-0112.html
    // https://documentation.cash/protocol/forks/bip-0068.html
    // https://bitcointalk.org/index.php?topic=1765597.msg62651680#msg62651680
    // https://bitcoin.stackexchange.com/questions/87372/what-does-the-sequence-in-a-transaction-input-mean
    // https://prestwi.ch/bitcoin-time-locks/
    // https://learnmeabitcoin.com/technical/transaction/input/sequence/

    require(tx.age >= 0);
    require(tx.inputs[3].sequenceNumber >= int(minWaitTime) && tx.inputs[3].sequenceNumber <= 4294967294);

    bytes20 bidderPKH, bytes name = tx.inputs[3].nftCommitment.split(20);
    
    int nameLength = name.length;
    bytes domainBytecode = 0x20 + parentCategory + bytes(nameLength) + name + domainContractBytecode;
    bytes32 scriptHash = hash256(domainBytecode);
    bytes35 domainLockingBytecode = new LockingBytecodeP2SH32(scriptHash);
    
    require(tx.outputs[3].lockingBytecode == domainLockingBytecode);
    require(tx.outputs[4].lockingBytecode == domainLockingBytecode);
        
    require(tx.outputs[3].nftCommitment == 0x);
    require(tx.outputs[3].value == 1000);

    bytes8 registrationId = bytes8(tx.inputs[3].tokenAmount).reverse();
    require(tx.outputs[4].nftCommitment == registrationId);
    require(tx.outputs[4].value == 1000);

    // Send the domain ownership NFT to the bidder
    require(tx.outputs[5].nftCommitment == registrationId + name);
    require(tx.outputs[5].lockingBytecode == new LockingBytecodeP2PKH(bidderPKH));
    require(tx.outputs[5].value == 1000);

    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount);

    // Output can be added by anyone (Mostly platforms)
    require(tx.outputs[6].tokenCategory == 0x);
    // Enforce that the other half goes to the miners.
    require(tx.outputs[6].value <= (tx.inputs[3].value / 100) * maxPlatformFeePercentage);
  }

}