pragma cashscript ^0.11.0;

contract DomainNameShield(bytes registryContractScriptHash) {
  /**
   * Proves that a domain name contains invalid characters and burns the associated NFT and takes away the funds as reward.
   * During the entire auction, this can be called anytime by anyone.
   * 
   * Rules:
   * 1. The name must consist of only these characters
   *    - Letters (a-z or A-Z)
   *    - Numbers (0-9)
   *    - Hyphens (-)
   *
   * @param characterNumber - Number of the character in the name that is invalid (starting from 1)
   *
   * @inputs
   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: auctionNFT
   *
   * @outputs
   * - Output0: Registry Contract's immutable NFT back to the Registry contract
   * - Output1: Input1 back to this contract without any change
   * - Output2: Reward to caller
   *
   */
  function call(int characterNumber) {
    require(tx.inputs.length == 3);
    require(tx.outputs.length == 3);

    // Lock this contract to only be used with the registry contract.
    require(tx.inputs[0].lockingBytecode == registryContractScriptHash);
    require(tx.inputs[2].lockingBytecode == registryContractScriptHash);

    // All the token categories in the transaction should be the same.
    bytes domainCategory = tx.outputs[0].tokenCategory.split(32)[0];

    bytes auctionCategory, bytes auctionCapability = tx.outputs[2].tokenCategory.split(32);
    require(auctionCategory == domainCategory);
    require(auctionCapability == 0x01); // Mutable

    // Send the tokenAmount to the registry contract
    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[2].tokenAmount);

    bytes name = tx.inputs[2].nftCommitment.split(20)[1];

    bytes characterSplitBytes = name.split(characterNumber)[0];
    characterNumber = characterNumber - 1;
    bytes character = characterSplitBytes.split(characterNumber)[1];
    int charVal = int(character);

    // If the character is invalid.
    require(
      !within(charVal, 97, 123) ||
      !within(charVal, 65, 91) ||
      !within(charVal, 48, 58) ||
      charVal != 45
    );

    // Pure BCH
    require(tx.outputs[2].tokenCategory == 0x);
  }

}