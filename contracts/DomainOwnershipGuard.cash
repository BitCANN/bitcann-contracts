pragma cashscript ^0.11.0;

contract DomainOwnershipGuard(
  bytes domainContractBytecode,
  bytes tld
) {
  /**
   * If the domain being auctioned already has an 'externalAuth' NFT with the same category, then the auction is invalid.
   * Penalizes invalid domain registrations by allowing anyone to burn the auctionNFT and claim the funds as a reward.
   * 
   * @inputs
   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: External Auth NFT from the domain contract
   * - Input3: auctionNFT
   * 
   * @outputs
   * - Output0: Registry Contract's immutable NFT back to the Registry contract
   * - Output1: Input1 back to this contract without any change
   * - Output2: External Auth NFT back to the domain contract
   * - Output3: BCH change/reward to caller
   */
  function call(){
    require(tx.inputs.length == 4);
    require(tx.outputs.length == 4);
    
    // This contract can only be used at input1 and it should return to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);

    // Lock this contract to only be used with the registry type contract.
    bytes parentContractScriptHash = tx.inputs[0].lockingBytecode;
    require(tx.inputs[3].lockingBytecode == parentContractScriptHash);

    bytes parentCategory = tx.inputs[0].tokenCategory;
    require(tx.inputs[2].tokenCategory == parentCategory);
    require(tx.outputs[2].tokenCategory == parentCategory);
    require(tx.inputs[3].tokenCategory.split(32)[0] == parentCategory);
    require(tx.inputs[2].nftCommitment == tx.outputs[2].nftCommitment);
    require(tx.inputs[2].nftCommitment == 0x); // Ensure that the externalAuth NFT is used and not the internalAuth NFT.

    bytes fullName = tx.inputs[3].nftCommitment.split(20)[1] + tld;
    int fullNameLength = fullName.length;

    bytes domainBytecode = 0x20 + parentCategory + bytes(fullNameLength) + fullName + domainContractBytecode;
    bytes32 scriptHash = hash256(domainBytecode);
    bytes35 domainLockingBytecode = new LockingBytecodeP2SH32(scriptHash);

    require(tx.inputs[2].lockingBytecode == domainLockingBytecode);
    require(tx.outputs[2].lockingBytecode == domainLockingBytecode);

    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount);
  }
}