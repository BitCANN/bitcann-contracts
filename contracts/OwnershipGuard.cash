pragma cashscript 0.11.3;

/**
 * @param nameContractBytecode The the partial bytecode of the name contract that has an Owner.
 * @param tld - TLD of the name
 */
contract OwnershipGuard(bytes nameContractBytecode, bytes tld) {
  /**
   * If the name being auctioned already has an `externalAuthNFT` with the same category, then the auction is invalid.
   * Because it means that an owner still exists. If it is known that the name has been abandoned for > `inactivityExpiryTime`
   * then one must use the `burn` method of the name.cash to burn the internalAuthNFT and externalAuthNFT making the 
   * name to be available for auction.
   *
   * Penalizes invalid name registrations by allowing anyone to burn the auctionNFT and claim the funds as a reward.
   * 
   * @inputs
   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: External Auth NFT from the Name Contract
   * - Input3: auctionNFT from Registry Contract
   * 
   * @outputs
   * - Output0: Registry Contract's authorizedThreadNFT back to the Registry contract.
   * - Output1: Input1 back to this contract without any change
   * - Output2: External Auth NFT back to the Name Contract
   * - Output3: BCH change/reward to caller
   */
  function call(){
    require(tx.inputs.length == 4, "Invalid number of inputs");
    require(tx.outputs.length == 4, "Invalid number of outputs");
    
    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1, "Active input index is not 1");
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode, "Locking bytecode mismatch");

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will
    // be manipulating their own utxos.
    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[3].lockingBytecode == registryInputLockingBytecode, "Locking bytecode mismatch");

    bytes registryInputCategory = tx.inputs[0].tokenCategory;
    require(tx.inputs[2].tokenCategory == registryInputCategory, "Token category mismatch");
    require(tx.outputs[2].tokenCategory == registryInputCategory, "Token category mismatch");

    // AuctionNFT should be mutable and of the 'nameCategory' i.e registryInputCategory
    bytes auctionCategory, bytes auctionCapability = tx.inputs[3].tokenCategory.split(32);
    require(auctionCategory == registryInputCategory, "Auction category mismatch");
    // Mutable
    require(auctionCapability == 0x01, "Auction capability is not mutable");

    // nftCommiment of the externalAuthNFT must stay the same
    require(tx.inputs[2].nftCommitment == tx.outputs[2].nftCommitment, "NFT commitment does not match");
    // Ensure that the externalAuth NFT is used and not the internalAuth NFT.
    require(tx.inputs[2].nftCommitment == 0x, "NFT commitment does not match");

    // Get the name of the name from the auctionNFT
    bytes name = tx.inputs[3].nftCommitment.split(20)[1];
    // Get the name length to generate the complete bytecode of the name contract
    int nameLength = name.length;
    // category + name + bytecode.
    // Note: `inactivityExpiryTime` in the name is already added to the nameContractBytecode in the constructor.
    bytes nameBytecode = 0x20 + registryInputCategory + bytes(nameLength + tld.length) + name + tld + nameContractBytecode;
    bytes32 scriptHash = hash256(nameBytecode);
    bytes35 nameLockingBytecode = new LockingBytecodeP2SH32(scriptHash);

    // Ensure that the externalAuthNFT is coming from the correct Name Contract
    require(tx.inputs[2].lockingBytecode == nameLockingBytecode, "Locking bytecode mismatch");
    require(tx.outputs[2].lockingBytecode == nameLockingBytecode, "Locking bytecode mismatch");

    // tokenAmount from the auctionNFT goes to the authorizedThreadNFT to be accumulated later
    // and merged back with the CounterNFT using the `Accumulator` Contract
    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount, "Token amount mismatch");

    // Reward Output
    require(tx.outputs[3].tokenCategory == 0x, "Token category is not BCH");
  }
}