pragma cashscript ^0.11.0;

contract Domain(bytes4 inactivityExpiryTime, bytes name, bytes domainCategory) {
  /**
   * Adds or removes a record associated with this domain.
   * 
   * Records are stored in OP_RETURN outputs and can be added or removed by the domain owner.
   * To add a record, include the record data directly in the OP_RETURN output.
   * To remove a record, prefix "RM" followed by the hash of the record content in the OP_RETURN output.
   * 
   * @inputs
   * - Input0: Internal Auth NFT
   * - Input1: Domain ownership NFT from the owner
   * - Input2: Funding UTXO (Can come from anywhere)
   * 
   * @outputs  
   * - Output0: Internal Auth NFT returned to this contract
   * - Output1: Domain NFT returned to the owner
   * - Output2: OP_RETURN containing record data or removal hash
   * - Output3: BCH change output
   * 
   */
  function addRecord() {
    require(tx.inputs.length == 3);
    require(tx.outputs.length == 4);

    bytes activeLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;

    require(tx.inputs[0].lockingBytecode == activeLockingBytecode);
    require(tx.outputs[0].lockingBytecode == activeLockingBytecode);

    require(tx.inputs[0].tokenCategory == domainCategory);
    require(tx.inputs[1].tokenCategory == domainCategory);
    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);
    require(tx.inputs[1].tokenCategory == tx.outputs[1].tokenCategory);

    require(tx.inputs[0].nftCommitment == tx.outputs[0].nftCommitment);
    require(tx.inputs[1].nftCommitment == tx.outputs[1].nftCommitment);

    bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[1].nftCommitment.split(8);
    require(tx.inputs[0].nftCommitment == registrationId);
    require(nameFromOwnerNFT == name);

    // This enforces an OP_RETURN output.
    require(tx.outputs[2].value == 0);
    require(tx.outputs[3].tokenCategory == 0x);
  }

  /*
   * Allows this to be attached to other contracts and prove that the domain is owned.
   */
  function externalUse() {
    require(tx.inputs[this.activeInputIndex].nftCommitment == 0x);
    require(tx.inputs[this.activeInputIndex].tokenCategory == domainCategory);

    require(tx.outputs[this.activeInputIndex].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);
    require(tx.outputs[this.activeInputIndex].tokenCategory == tx.inputs[this.activeInputIndex].tokenCategory);
    require(tx.outputs[this.activeInputIndex].nftCommitment == tx.inputs[this.activeInputIndex].nftCommitment);
    require(tx.outputs[this.activeInputIndex].value == tx.inputs[this.activeInputIndex].value);
  }

  /**
   * Allows the domain owner or anyone to burn the domain by burning NFTs that control this contract.
   * 
   * If the internalAuth NFT has not been used for more than 730 days, i.e., 2 years, then allow anyone to burn the domain.
   * Always allow the owner to burn the domain NFTs.
   *
   * @inputs
   * - Input0: Internal Auth NFT
   * - Input1: External Auth NFT
   * - Input2: Pure BCH or Domain ownership NFT from the owner
   *
   * @outputs 
   * - Output0: BCH change
   *
   */
  function burn() {
    require(tx.version == 2);

    require(tx.inputs.length == 3);
    require(tx.outputs.length == 1);

    if (tx.inputs[2].tokenCategory == 0x) {
      // If pure BCH input, then allow anyone to burn given the time limit has passed.
      // Using block-based
      require(tx.age >= 0);
      // Using block-based
      // inactivityExpiryTime = 105120 blocks = 2 years
      require(tx.inputs[1].sequenceNumber >= int(inactivityExpiryTime) && tx.inputs[3].sequenceNumber <= 4294967294);
    } else {
      // If domain ownership NFT input, then allow the owner to burn anytime.
      require(tx.inputs[2].tokenCategory == domainCategory);
      require(tx.inputs[2].nftCommitment.split(8)[0] == tx.inputs[0].nftCommitment);
    }

    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;
    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);
    require(tx.inputs[1].lockingBytecode == selfLockingBytecode);

    require(tx.inputs[0].nftCommitment == 0x);
    require(tx.inputs[0].tokenCategory == tx.inputs[1].tokenCategory);
    require(tx.inputs[0].tokenCategory == domainCategory);

    // Return the BCH as change.
    require(tx.outputs[0].tokenCategory == 0x);
  }
}
