pragma cashscript 0.11.5;

/**
 * @param nameContractBytecode - Partial bytecode of the name contract
 * @param creatorIncentivePKH - PKH of the creator incentive
 */
contract Factory(
  bytes nameContractBytecode,
  bytes20 creatorIncentivePKH,
) {
  /**
   * This function finalizes a name registration auction by:
   * - Verifying the auction has ended and the winner's bid is valid
   * - Issuing an immutable externalAuthNFT to the Name Contract
   * - Issuing an immutable internalAuthNFT to the Name Contract
   * - Issuing an immutable name NFT to the auction winner
   * - Distributing auction fees between the creator and miners
   * - Burning the auctionNFT
   *
   * @inputs
   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: NameMintingNFT from the Registry Contract
   * - Input3: auctionNFT from the Registry Contract
   *
   * @outputs
   * - Output0: Registry Contract's authorizedThreadNFT back to the Registry contract.
   * - Output1: Input1 back to this contract without any change
   * - Output2: NameMintingNFT back to the Registry contract
   * - Output3: External Auth NFT to the name contract
   * - Output4: Internal Auth NFT to the name contract
   * - Output5: Name NFT to the auction winner
   * - Output6: Creator incentive
   *
   */
  function call(){
    require(tx.inputs.length == 4, "Transaction: must have exactly 4 inputs");
    require(tx.outputs.length <= 7, "Transaction: must have at most 7 outputs");

    // This contract can only be used at input1 and it should return to itself.
    require(this.activeInputIndex == 1, "Input 1: factory contract UTXO must be at this index");
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode, "Input 1: locking bytecode must match output 1");
    // Ensure that no tokenCategory is minted here.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x, "Output 1: must not have any token category (pure BCH only)");
    // Strict value checks to ensure the platform and miner get fee.
    require(tx.inputs[this.activeInputIndex].value == tx.outputs[this.activeInputIndex].value, "Input 1: satoshi value must match output 1");

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will
    // be manipulating their own utxos.
    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == registryInputLockingBytecode, "Input 2: name minting NFT locking bytecode does not match registry input's locking bytecode");
    require(tx.inputs[3].lockingBytecode == registryInputLockingBytecode, "Input 3: auction NFT locking bytecode does not match registry input's locking bytecode");
    require(tx.outputs[2].lockingBytecode == registryInputLockingBytecode, "Output 2: name minting NFT locking bytecode does not match registry input's locking bytecode");

    // All the token categories in the transaction should be the same.
    bytes registryInputCategory = tx.inputs[0].tokenCategory;
    require(tx.outputs[3].tokenCategory == registryInputCategory, "Output 3: external auth NFT token category prefix must match registry");
    require(tx.outputs[4].tokenCategory == registryInputCategory, "Output 4: internal auth NFT token category prefix must match registry");
    require(tx.outputs[5].tokenCategory == registryInputCategory, "Output 5: name ownership NFT token category prefix must match registry");

    // NameMintingNFT should be minting and of the 'nameCategory' i.e registryInputCategory
    bytes nameMintingCategory, bytes nameMintingCapability = tx.inputs[2].tokenCategory.split(32);
    require(nameMintingCategory == registryInputCategory, "Input 2: name minting NFT token category prefix must match registry");
    // Minting
    require(nameMintingCapability == 0x02, "Input 2: name minting NFT capability must be minting (0x02)");
    // NameMintingNFT should keep the same category and capability
    require(tx.inputs[2].tokenCategory == tx.outputs[2].tokenCategory, "Output 2: name minting NFT token category must match input 2");

    // AuctionNFT should be mutable and of the 'nameCategory' i.e registryInputCategory
    bytes auctionCategory, bytes auctionCapability = tx.inputs[3].tokenCategory.split(32);
    require(auctionCategory == registryInputCategory, "Input 3: auction NFT token category prefix must match registry");
    // Mutable
    require(auctionCapability == 0x01, "Input 3: auction NFT capability must be mutable (0x01)");

    // NameMintingNFT has no nftCommitment
    require(tx.outputs[2].nftCommitment == 0x, "Output 2: name minting NFT must have empty commitment");
    require(tx.inputs[2].nftCommitment == 0x, "Input 2: name minting NFT must have empty commitment");

    // NameMintingNFT has no tokenAmount
    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount, "Output 2: name minting NFT token amount must match input 2");
    require(tx.outputs[2].tokenAmount == 0, "Output 2: name minting NFT token amount must be 0");

    // Strict value check
    require(tx.outputs[2].value == tx.inputs[2].value, "Output 2: name minting NFT satoshi value must match input 2");

    // Enforcing the relative timelock, the auctionNFT must be atleast 4194306 old
    // to be considered ended.
    // 4194306 is sequence number in time, 2*512 seconds

    // TODO: Make this 3 hours
    require(tx.inputs[3].sequenceNumber == 4194306, "Input 3: auction NFT sequence number must equal 4194306");

    // Extract the PKH and name from the auctionNFT
    bytes20 bidderPKH, bytes name = tx.inputs[3].nftCommitment.split(20);
    
    // Get the name length to generate the complete bytecode of the name contract
    int nameLength = name.length;
    // category + name + bytecode.
    // Note: `inactivityExpiryTime` in the name is already added to the nameContractBytecode in the constructor.
    bytes constant tld = bytes('.bch');
    bytes nameBytecode = 0x20 + registryInputCategory + bytes(tld.length) + tld + bytes(nameLength) + name + nameContractBytecode;
    bytes32 scriptHash = hash256(nameBytecode);
    bytes35 nameLockingBytecode = new LockingBytecodeP2SH32(scriptHash);
    
    // ExternalAuthNFT goes to the name contract
    require(tx.outputs[3].lockingBytecode == nameLockingBytecode, "Output 3: external auth NFT locking bytecode must match name contract");
    // InternalAuthNFT goes to the name contract
    require(tx.outputs[4].lockingBytecode == nameLockingBytecode, "Output 4: internal auth NFT locking bytecode must match name contract");
    
    // ExternalAuthNFT does not have any commitment
    require(tx.outputs[3].nftCommitment == 0x, "Output 3: external auth NFT must have empty commitment");
    // Strict value check
    require(tx.outputs[3].value == 1000, "Output 3: external auth NFT satoshi value must be 1000");

    // InternalAuthNFT has registrationID as the commitment so it can be used to authenticate
    // along with the ownershipNFT
    int registrationId = int(tx.outputs[4].nftCommitment);
    require(tx.inputs[3].tokenAmount == registrationId, "Output 4: internal auth NFT commitment must match registration ID");
    // Strict value check
    require(tx.outputs[4].value == 1000, "Output 4: internal auth NFT satoshi value must be 1000");

    // Send the name ownership NFT to the bidder
    require(tx.outputs[5].nftCommitment == tx.outputs[4].nftCommitment + name, "Output 5: name ownership NFT commitment must match registration ID + name");
    require(tx.outputs[5].lockingBytecode == new LockingBytecodeP2PKH(bidderPKH), "Output 5: name ownership NFT locking bytecode must match bidder PKH");
    require(tx.outputs[5].value == 1000, "Output 5: name ownership NFT satoshi value must be 1000");

    // tokenAmount from the auctionNFT goes to the authorizedThreadNFT to be accumulated later
    // and merged back with the CounterNFT using the `Accumulator` Contract
    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount, "Output 0: token amount must equal input 0 + input 3 amounts (accumulation)");

    // Dual Decay mechanism, creator incentive decays linearly with the step.

    // Initial minimal fee is 6500; 1000 * 3 (nft outputs) + 3500 Miner Fee
    int minimalDeduction = tx.inputs[3].value - 6500;
    int creatorIncentive = (minimalDeduction * (1e5 - tx.inputs[3].tokenAmount) / 1e5);

    // TODO: Make this 20000
    // If incentive is > 20000 satoshis, then it goes to the creator, else it goes to the miners.
    if(creatorIncentive > 1000) {
      require(tx.outputs[6].tokenCategory == 0x, "Output 6: creator incentive must be pure BCH (no token category)");
      // Enforce that the other piece of the fee goes to the miners.
      require(tx.outputs[6].value == creatorIncentive, "Output 6: creator incentive satoshi value must match calculated incentive");
      require(tx.outputs[6].lockingBytecode == new LockingBytecodeP2PKH(creatorIncentivePKH), "Output 6: creator incentive locking bytecode must match creator PKH");
    }
  }

}