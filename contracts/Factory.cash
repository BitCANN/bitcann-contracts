pragma cashscript 0.11.3;

/**
 * @param nameContractBytecode - Partial bytecode of the name contract
 * @param minWaitTime - Minimum wait time to consider an auction ended
 * @param creatorIncentivePKH - PKH of the creator incentive
 * @param tld - TLD of the name
 */
contract Factory(
  bytes nameContractBytecode,
  int minWaitTime,
  bytes20 creatorIncentivePKH,
  bytes tld
) {
  /**
   * This function finalizes a name registration auction by:
   * - Verifying the auction has ended and the winner's bid is valid
   * - Issuing an immutable externalAuthNFT to the Name Contract
   * - Issuing an immutable internalAuthNFT to the Name Contract
   * - Issuing an immutable name NFT to the auction winner
   * - Distributing auction fees between the platform and miners
   * - Burning the auctionNFT
   * - Pure BCH input from bidder is used to prevent miners from taking away the funds from any or all transactions in the future.
   *   Out of many possible ways, this method will be suitable to easily implement by applications.
   *
   *
   * @inputs
   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: NameMintingNFT from the Registry Contract
   * - Input3: auctionNFT from the Registry Contract
   *
   * @outputs
   * - Output0: Registry Contract's authorizedThreadNFT back to the Registry contract.
   * - Output1: Input1 back to this contract without any change
   * - Output2: NameMintingNFT back to the Registry contract
   * - Output3: External Auth NFT to the name contract
   * - Output4: Internal Auth NFT to the name contract
   * - Output5: Name NFT to the auction winner
   * - Output6: Platform fee [Reduces and the not included]
   *
   */
  function call(){
    require(tx.inputs.length == 4);
    require(tx.outputs.length <= 7);

    // This contract can only be used at input1 and it should return to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    // Ensure that the nameCategory in not minted here.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);
    // Strict value checks to ensure the platform and miner get fee.
    require(tx.inputs[this.activeInputIndex].value == tx.outputs[this.activeInputIndex].value);

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will
    // be manipulating their own utxos.
    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == registryInputLockingBytecode);
    require(tx.inputs[3].lockingBytecode == registryInputLockingBytecode);
    require(tx.outputs[2].lockingBytecode == registryInputLockingBytecode);

    // All the token categories in the transaction should be the same.
    bytes registryInputCategory = tx.inputs[0].tokenCategory;
    require(tx.outputs[3].tokenCategory == registryInputCategory);
    require(tx.outputs[4].tokenCategory == registryInputCategory);
    require(tx.outputs[5].tokenCategory == registryInputCategory);

    // NameMintingNFT should be minting and of the 'nameCategory' i.e registryInputCategory
    bytes nameMintingCategory, bytes nameMintingCapability = tx.inputs[2].tokenCategory.split(32);
    require(nameMintingCategory == registryInputCategory);
    // Minting
    require(nameMintingCapability == 0x02);
    // NameMintingNFT should keep the same category and capability
    require(tx.inputs[2].tokenCategory == tx.outputs[2].tokenCategory);

    // AuctionNFT should be mutable and of the 'nameCategory' i.e registryInputCategory
    bytes auctionCategory, bytes auctionCapability = tx.inputs[3].tokenCategory.split(32);
    require(auctionCategory == registryInputCategory);
    // Mutable
    require(auctionCapability == 0x01);

    // Enforce strict restrictions on NameMintingNFT
    require(tx.inputs[2].nftCommitment == tx.outputs[2].nftCommitment);
    // NameMintingNFT has no nftCommitment
    require(tx.outputs[2].nftCommitment == 0x);
    // NameMintingNFT has no tokenAmount
    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount);
    require(tx.outputs[2].tokenAmount == 0);

    // Strict value check
    require(tx.outputs[2].value == tx.inputs[2].value);

    // Enforcing the relative timelock, the auctionNFT must be atleast `minWaitTime` old
    // to be considered ended.
    require(tx.inputs[3].sequenceNumber == minWaitTime);

    // Extract the PKH and name from the auctionNFT
    bytes20 bidderPKH, bytes name = tx.inputs[3].nftCommitment.split(20);
    
    // Get the name length to generate the complete bytecode of the name contract
    int nameLength = name.length;
    // category + name + bytecode.
    // Note: `inactivityExpiryTime` in the name is already added to the nameContractBytecode in the constructor.
    bytes nameBytecode = 0x20 + registryInputCategory + bytes(nameLength) + name + tld + nameContractBytecode;
    bytes32 scriptHash = hash256(nameBytecode);
    bytes35 nameLockingBytecode = new LockingBytecodeP2SH32(scriptHash);
    
    // ExternalAuthNFT goes to the name contract
    require(tx.outputs[3].lockingBytecode == nameLockingBytecode);
    // InternalAuthNFT goes to the name contract
    require(tx.outputs[4].lockingBytecode == nameLockingBytecode);
    
    // ExternalAuthNFT does not have any commitment
    require(tx.outputs[3].nftCommitment == 0x);
    // Strict value check
    require(tx.outputs[3].value == 1000);

    // InternalAuthNFT has registrationID as the commitment so it can be used to authenticate
    // along with the ownershipNFT
    bytes8 registrationId = bytes8(tx.inputs[3].tokenAmount);
    require(tx.outputs[4].nftCommitment == registrationId);
    // Strict value check
    require(tx.outputs[4].value == 1000);

    // Send the name ownership NFT to the bidder
    require(tx.outputs[5].nftCommitment == registrationId + name);
    require(tx.outputs[5].lockingBytecode == new LockingBytecodeP2PKH(bidderPKH));
    require(tx.outputs[5].value == 1000);

    // tokenAmount from the auctionNFT goes to the authorizedThreadNFT to be accumulated later
    // and merged back with the CounterNFT using the `Accumulator` Contract
    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount);

    // Dual Decay mechanism, creator incentive decays linearly with the step.
    // 1. Decay points (0.001% per step)
    int decayPoints = tx.inputs[3].tokenAmount;
    // 2. Get creator incentive points
    int creatorIncentivePoints = tx.inputs[3].tokenAmount * 1e5;
    // 3. Subtract creator incentive points by decay points to get the current creator incentive.
    int creatorIncentive = (creatorIncentivePoints - decayPoints) / 1e5;

    // If incentive is > 20000 satoshis, then it goes to the creator, else it goes to the miners.
    if(creatorIncentive > 20000) {
      require(tx.outputs[6].tokenCategory == 0x);
      // Enforce that the other piece of the fee goes to the miners.
      require(tx.outputs[6].value == creatorIncentive);
      require(tx.outputs[6].lockingBytecode == new LockingBytecodeP2PKH(creatorIncentivePKH));
    }
  }

}