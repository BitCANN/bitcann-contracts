pragma cashscript 0.11.4;

contract Accumulator() {
  /**
   * Once enough auctions have happened, counterNFT's tokenAmount will not be enough to create another auction as the
   * amount would be accumulating in the thread NFTs. This function will be used to transfer them back to the
   * Counter NFT to keep the system functioning smoothly.
   * 
   * @inputs
   * - Input0: Registry Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract
   * - Input2: Minting CounterNFT + tokenAmount from Registry Contract
   * - Input3: authorizedThreadNFT + tokenAmount from Registry Contract
   * - Input4: Funding UTXO
   * 
   * @outputs
   * - Output0: Registry Contract's authorizedThreadNFT back to the Registry contract
   * - Output1: Input1 back to this contract
   * - Output2: Minting CounterNFT + tokenAmount back to the Registry contract
   * - Output3: authorizedThreadNFT back to the Registry contract (without tokenAmount)
   * - Output4: Change BCH
   */
  function call(){
    // Info: Ignored checks:
    // - No transaction version enforcement. The contract at 0th index, i.e the Registry Contract has enforced the transaction version,
    // since all the main utxos live with the registry contract, there is no need to enforce it here as well.
    // - No output value checks: Any unnecessary bch value in the utxos can be extracted by the change output.

    require(tx.inputs.length == 5, "Transaction: must have exactly 5 inputs");
    require(tx.outputs.length == 5, "Transaction: must have exactly 5 outputs");

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1, "Input 1: accumulator contract UTXO must be at this index");
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode, "Input 1: locking bytecode must match output 1");
    // Restriction on output category is important as minting NFT is used in this transaction.
    // No need to check input category as it will be automatically burned in this transaction.
    // Not allowing any category leaks by restricting the output category to pure BCH.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x, "Output 1: must not have any token category (pure BCH only)");

    // This contract can be used with any contract that fulfills these conditions, this contract acts as a
    // code injection mechanism for the Registry contract.
    bytes registryInputLockingBytecode = tx.inputs[0].lockingBytecode;

    // Enforce input 2 and 3 to be from the registry
    require(tx.inputs[2].lockingBytecode == registryInputLockingBytecode, "Input 2: locking bytecode does not match registry input's locking bytecode");
    require(tx.inputs[3].lockingBytecode == registryInputLockingBytecode, "Input 3: locking bytecode does not match registry input's locking bytecode");

    // Enforce output 2 and 3 are returning to the registry
    require(tx.outputs[2].lockingBytecode == registryInputLockingBytecode, "Output 2: locking bytecode does not match registry input's locking bytecode");
    require(tx.outputs[3].lockingBytecode == registryInputLockingBytecode, "Output 3: locking bytecode does not match registry input's locking bytecode");

    // Enforce NFT transfer preserves token categories
    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory, "Output 2: token category does not match input 2");
    require(tx.outputs[3].tokenCategory == tx.inputs[3].tokenCategory, "Output 3: token category does not match input 3");

    // Grab the tokenCategory from the Registry Contract's input
    bytes registryInputCategory = tx.inputs[0].tokenCategory;
    // Split counter token category and capability
    bytes counterCategory, bytes counterCapability = tx.inputs[2].tokenCategory.split(32);
    require(counterCapability == 0x02, "Input 2: counter capability must be minting capability (0x02)");

    require(counterCategory == registryInputCategory, "Input 2: token category prefix does not match registry");
    require(tx.inputs[3].tokenCategory == registryInputCategory, "Input 3: token category does not match registry");

    // nftCommitment of counter nft is registrationID so it must not be null
    require(tx.inputs[2].nftCommitment != 0x, "Input 2: counter nft must have a non-empty commitment (registration ID)");
    // nftCommitment of the authorized contract is 35 bytes long.
    require(tx.inputs[3].nftCommitment.length == 35, "Input 3: nft commitment length must be 35 bytes (authorized contract locking bytecode)");

    // Minting nft is used in the transaction, ensure that the nft commitment is preserved.
    require(tx.outputs[2].nftCommitment == tx.inputs[2].nftCommitment, "Output 2: nft commitment does not match input 2");
    require(tx.outputs[3].nftCommitment == tx.inputs[3].nftCommitment, "Output 3: nft commitment does not match input 3");

    // Ensure that the counter minting nft is used.
    require(tx.inputs[2].tokenAmount > 0, "Input 2: counter nft must have token amount greater than 0");
    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount + tx.inputs[3].tokenAmount, "Output 2: token amount must equal input 2 + input 3 amounts (accumulation)");

    // Pure BCH input and output.
    require(tx.inputs[4].tokenCategory == 0x, "Input 4: must be pure BCH (no token category)");
    require(tx.outputs[4].tokenCategory == 0x, "Output 4: must be pure BCH (no token category)");
  }
}