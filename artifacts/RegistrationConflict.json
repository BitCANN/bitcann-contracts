{
  "contractName": "RegistrationConflict",
  "constructorInputs": [
    {
      "name": "registryContractScriptHash",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_6 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY 00 OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_ROT OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_4 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_5 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_3 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_4 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_5 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_5 OP_PICK OP_4 OP_ROLL OP_EQUALVERIFY OP_2 OP_PICK OP_EQUALVERIFY OP_ROT OP_EQUALVERIFY OP_SWAP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_LESSTHAN OP_VERIFY OP_2 OP_UTXOTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_3 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_UTXOVALUE OP_2 OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_3 OP_UTXOVALUE OP_3 OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_5 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL",
  "source": "pragma cashscript ^0.11.0;\n\ncontract RegistrationConflict(bytes registryContractScriptHash) {\n  /**\n   * Resolves a conflict between two competing registration auctions for the same name\n   * \n   * If any new auction is created when an auction already exists then the new auction is open for penalization.\n   * Anyone can provide the proof of an active auction's existance and take away the funds from the \"new\" invalid auction\n   * as a form of reward for keeping the system secure and predictable.\n   * Therefore, it's the responsibility of the application to check for any running auctions for the same name.\n   * \n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: Valid (earlier) auction's NFT pair0 - immutable NFT with registrationId + name\n   * - Input3: Valid (earlier) auction's NFT pair1 - mutable NFT with auction state\n   * - Input4: Invalid (newer) auction's NFT pair0 - immutable NFT to be removed\n   * - Input5: Invalid (newer) auction's NFT pair1 - mutable NFT to be removed\n   * \n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: Valid auction's NFT pair0 preserved\n   * - Output3: Valid auction's NFT pair1 preserved\n   * - Output4: BCH change/reward to caller\n   */\n  function call() {\n    require(tx.inputs.length == 6);\n    require(tx.outputs.length == 5);\n    // Lock this contract to only be used with the registry contract.\n    require(tx.inputs[0].lockingBytecode == registryContractScriptHash);\n    // All the input and output conditions for inputs[0], inputs[1], outputs[0] and outputs[1] are already checked in the registry contract.\n\n    // INFO: It is impotrant to check the tokenCategory of all the NFTs as a malicious actor can create an NFT\n    // with some other category, send it to registry contract with registrationAuctionID lower than the valid bid\n    // leading to burning of valid bid NFTs.\n\n    // All the token categories in the transaction should be the same.\n    bytes domainCategory = tx.outputs[0].tokenCategory.split(32)[0];\n\n    bytes validPair0Category, bytes validPair0Capability = tx.inputs[2].tokenCategory.split(32);\n    require(validPair0Category == domainCategory);\n    require(validPair0Capability == 0x00); // Immutable\n\n    bytes validPair1Category, bytes validPair1Capability = tx.inputs[3].tokenCategory.split(32);\n    require(validPair1Category == domainCategory);\n    require(validPair1Capability == 0x01); // Mutable\n\n    // 2-4 should be same, 3-5 should be same\n    require(tx.inputs[2].tokenCategory == tx.inputs[4].tokenCategory);\n    require(tx.inputs[3].tokenCategory == tx.inputs[5].tokenCategory);\n\n    bytes validRegistrationAuctionIdPair0, bytes nameFromValidBid = tx.inputs[2].nftCommitment.split(8);\n    bytes validRegistrationAuctionIdPair1 = tx.inputs[3].nftCommitment.split(8)[0];\n\n    bytes invalidRegistrationAuctionIdPair0, bytes nameFromInvalidBid = tx.inputs[4].nftCommitment.split(8);\n    bytes invalidRegistrationAuctionIdPair1 = tx.inputs[5].nftCommitment.split(8)[0];\n\n    // Ensure the correct pair is being used for valid registration auction\n    require(validRegistrationAuctionIdPair0 == validRegistrationAuctionIdPair1);\n    // Ensure the correct pair is being used for invalid registration auction\n    require(invalidRegistrationAuctionIdPair0 == invalidRegistrationAuctionIdPair1);\n    // Ensure the name is the same for both auctions so they can be compared\n    require(nameFromValidBid == nameFromInvalidBid);\n    // Ensure the auctionId of the valid bid is less than the auctionId of the invalid bid.\n    require(int(validRegistrationAuctionIdPair0) < int(invalidRegistrationAuctionIdPair0));\n\n    // Ensure no downgrading of the NFT can happen.\n    require(tx.inputs[2].tokenCategory == tx.outputs[2].tokenCategory);\n    require(tx.inputs[3].tokenCategory == tx.outputs[3].tokenCategory);\n\n    // Values for valid auction pair should be the same \n    require(tx.inputs[2].value == tx.outputs[2].value);\n    require(tx.inputs[3].value == tx.outputs[3].value);\n    \n    // Ensure the locking bytecode is the same for all the inputs and outputs\n    require(tx.inputs[2].lockingBytecode == registryContractScriptHash);    \n    require(tx.inputs[3].lockingBytecode == registryContractScriptHash);\n    require(tx.inputs[4].lockingBytecode == registryContractScriptHash);\n    require(tx.inputs[5].lockingBytecode == registryContractScriptHash);\n\n    require(tx.outputs[2].lockingBytecode == registryContractScriptHash);\n    require(tx.outputs[3].lockingBytecode == registryContractScriptHash);\n\n    // Reward\n    require(tx.outputs[4].tokenCategory == 0x);\n  }\n}",
  "debug": {
    "bytecode": "c3569c69c4559c6900c75179876900d101207f7552ce01207f517a52798769007a0100876953ce01207f517a527a8769007a51876952ce54ce876953ce55ce876952cf587f53cf587f7554cf587f55cf587f755579547a87695279517a8769527a517a8769517a81517a819f6952ce52d1876953ce53d1876952c652cc9c6953c653cc9c6952c75179876953c75179876954c75179876955c75179876952cd5179876953cd517a876954d10087",
    "sourceMap": "28:12:28:28;:32::33;:12:::1;:4::35;29:12:29:29:0;:33::34;:12:::1;:4::36;31:22:31:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;39:38:39:39:0;:27::54:1;:61::63:0;:27::64:1;:::67;41:69:41:70:0;:59::85:1;:92::94:0;:59::95:1;42:12:42:30:0;;:34::48;;:12:::1;:4::50;43:12:43:32:0;;:36::40;:12:::1;:4::42;45:69:45:70:0;:59::85:1;:92::94:0;:59::95:1;46:12:46:30:0;;:34::48;;:12:::1;:4::50;47:12:47:32:0;;:36::40;:12:::1;:4::42;50:22:50:23:0;:12::38:1;:52::53:0;:42::68:1;:12;:4::70;51:22:51:23:0;:12::38:1;:52::53:0;:42::68:1;:12;:4::70;53:78:53:79:0;:68::94:1;:101::102:0;:68::103:1;54:54:54:55:0;:44::70:1;:77::78:0;:44::79:1;:::82;56:82:56:83:0;:72::98:1;:105::106:0;:72::107:1;57:56:57:57:0;:46::72:1;:79::80:0;:46::81:1;:::84;60:12:60:43:0;;:47::78;;:12:::1;:4::80;62:12:62:45:0;;:49::82;;:12:::1;:4::84;64:12:64:28:0;;:32::50;;:12:::1;:4::52;66:16:66:47:0;;:12::48:1;:55::88:0;;:51::89:1;:12;:4::91;69:22:69:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;70:22:70:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;73:22:73:23:0;:12::30:1;:45::46:0;:34::53:1;:12;:4::55;74:22:74:23:0;:12::30:1;:45::46:0;:34::53:1;:12;:4::55;77:22:77:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;78:22:78:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;79:22:79:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;80:22:80:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;82:23:82:24:0;:12::41:1;:45::71:0;;:12:::1;:4::73;83:23:83:24:0;:12::41:1;:45::71:0;;:12:::1;:4::73;86:23:86:24:0;:12::39:1;:43::45:0;:12:::1",
    "logs": [],
    "requires": [
      {
        "ip": 4,
        "line": 28
      },
      {
        "ip": 8,
        "line": 29
      },
      {
        "ip": 14,
        "line": 31
      },
      {
        "ip": 29,
        "line": 42
      },
      {
        "ip": 34,
        "line": 43
      },
      {
        "ip": 44,
        "line": 46
      },
      {
        "ip": 49,
        "line": 47
      },
      {
        "ip": 55,
        "line": 50
      },
      {
        "ip": 61,
        "line": 51
      },
      {
        "ip": 85,
        "line": 60
      },
      {
        "ip": 91,
        "line": 62
      },
      {
        "ip": 97,
        "line": 64
      },
      {
        "ip": 105,
        "line": 66
      },
      {
        "ip": 111,
        "line": 69
      },
      {
        "ip": 117,
        "line": 70
      },
      {
        "ip": 123,
        "line": 73
      },
      {
        "ip": 129,
        "line": 74
      },
      {
        "ip": 135,
        "line": 77
      },
      {
        "ip": 141,
        "line": 78
      },
      {
        "ip": 147,
        "line": 79
      },
      {
        "ip": 153,
        "line": 80
      },
      {
        "ip": 159,
        "line": 82
      },
      {
        "ip": 165,
        "line": 83
      },
      {
        "ip": 170,
        "line": 86
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-04T14:40:44.211Z"
}