{
  "contractName": "DomainNameShield",
  "constructorInputs": [
    {
      "name": "registryContractScriptHash",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": [
        {
          "name": "characterNumber",
          "type": "int"
        }
      ]
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_ROT OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_2 OP_UTXOTOKENAMOUNT OP_ADD OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT 14 OP_SPLIT OP_NIP OP_OVER OP_SPLIT OP_DROP OP_OVER OP_1SUB OP_SPLIT OP_NIP OP_BIN2NUM OP_DUP 61 7b OP_WITHIN OP_NOT OP_OVER 41 5b OP_WITHIN OP_NOT OP_BOOLOR OP_OVER 30 3a OP_WITHIN OP_NOT OP_BOOLOR OP_SWAP 2d OP_NUMNOTEQUAL OP_BOOLOR OP_VERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP",
  "source": "pragma cashscript ^0.11.0;\n\ncontract DomainNameShield(bytes registryContractScriptHash) {\n  /**\n   * Proves that a domain name contains invalid characters and burns the associated NFT and takes away the funds as reward.\n   * During the entire auction, this can be called anytime by anyone.\n   * \n   * Rules:\n   * 1. The name must consist of only these characters\n   *    - Letters (a-z or A-Z)\n   *    - Numbers (0-9)\n   *    - Hyphens (-)\n   *\n   * @param characterNumber - Number of the character in the name that is invalid (starting from 1)\n   *\n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: auctionNFT\n   *\n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: Reward to caller\n   *\n   */\n  function call(int characterNumber) {\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 3);\n\n    // Lock this contract to only be used with the registry contract.\n    require(tx.inputs[0].lockingBytecode == registryContractScriptHash);\n    require(tx.inputs[2].lockingBytecode == registryContractScriptHash);\n\n    // All the token categories in the transaction should be the same.\n    bytes domainCategory = tx.outputs[0].tokenCategory.split(32)[0];\n\n    bytes auctionCategory, bytes auctionCapability = tx.outputs[2].tokenCategory.split(32);\n    require(auctionCategory == domainCategory);\n    require(auctionCapability == 0x01); // Mutable\n\n    // Send the tokenAmount to the registry contract\n    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[2].tokenAmount);\n\n    bytes name = tx.inputs[2].nftCommitment.split(20)[1];\n\n    bytes characterSplitBytes = name.split(characterNumber)[0];\n    characterNumber = characterNumber - 1;\n    bytes character = characterSplitBytes.split(characterNumber)[1];\n    int charVal = int(character);\n\n    // If the character is invalid.\n    require(\n      !within(charVal, 97, 123) ||\n      !within(charVal, 65, 91) ||\n      !within(charVal, 48, 58) ||\n      charVal != 45\n    );\n\n    // Pure BCH\n    require(tx.outputs[2].tokenCategory == 0x);\n  }\n\n}",
  "debug": {
    "bytecode": "c3539c69c4539c6900c75179876952c7517a876900d101207f7552d101207f517a527a8769007a51876900d300d052d0939c6952cf01147f77007a51797f7551795194517a517a7f77007a8100790161017ba59151790141015ba5919b51790130013aa5919b517a012d9e9b6952d1008777",
    "sourceMap": "28:12:28:28;:32::33;:12:::1;:4::35;29:12:29:29:0;:33::34;:12:::1;:4::36;32:22:32:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;33:22:33:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;36:38:36:39:0;:27::54:1;:61::63:0;:27::64:1;:::67;38:64:38:65:0;:53::80:1;:87::89:0;:53::90:1;39:12:39:27:0;;:31::45;;:12:::1;:4::47;40:12:40:29:0;;:33::37;:12:::1;:4::39;43:23:43:24:0;:12::37:1;:51::52:0;:41::65:1;:78::79:0;:68::92:1;:41;:12;:4::94;45:27:45:28:0;:17::43:1;:50::52:0;:17::53:1;:::56;47:32:47:36:0;;:43::58;;:32::59:1;:::62;48:22:48:37:0;;:40::41;:22:::1;49::49::0;;:48::63;;:22::64:1;:::67;50::50:31:0;;:18::32:1;54:14:54:21:0;;:23::25;:27::30;:7::31:1;:6;55:14:55:21:0;;:23::25;:27::29;:7::30:1;:6;54;56:14:56:21:0;;:23::25;:27::29;:7::30:1;:6;54;57::57:13:0;;:17::19;:6:::1;54;53:4:58:6;61:23:61:24:0;:12::39:1;:43::45:0;:12:::1;27:2:62:3",
    "logs": [],
    "requires": [
      {
        "ip": 4,
        "line": 28
      },
      {
        "ip": 8,
        "line": 29
      },
      {
        "ip": 14,
        "line": 32
      },
      {
        "ip": 20,
        "line": 33
      },
      {
        "ip": 35,
        "line": 39
      },
      {
        "ip": 40,
        "line": 40
      },
      {
        "ip": 49,
        "line": 43
      },
      {
        "ip": 99,
        "line": 53
      },
      {
        "ip": 104,
        "line": 61
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-06T19:10:06.753Z"
}