{
  "contractName": "DomainFactory",
  "constructorInputs": [
    {
      "name": "registryContractScriptHash",
      "type": "bytes"
    },
    {
      "name": "domainContractPartialBytecodeHash",
      "type": "bytes"
    },
    {
      "name": "platformPKH",
      "type": "bytes20"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": [
        {
          "name": "domainContractPartialBytecode",
          "type": "bytes"
        }
      ]
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_TXLOCKTIME 78ae10 OP_GREATERTHAN OP_IF OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTBYTECODE 76a914 OP_4 OP_PICK OP_CAT 88ac OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTVALUE OP_2 OP_UTXOVALUE OP_2 OP_DIV OP_NUMEQUALVERIFY OP_ENDIF OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_2 OP_CHECKSEQUENCEVERIFY OP_DROP OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY 00 OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_ROT OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_3 OP_UTXOBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_3 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_1 OP_SPLIT OP_1 OP_EQUALVERIFY OP_TXLOCKTIME OP_ROT OP_BIN2NUM OP_GREATERTHAN OP_VERIFY OP_3 OP_PICK OP_ROT OP_EQUALVERIFY OP_6 OP_PICK OP_HASH160 OP_5 OP_ROLL OP_EQUALVERIFY 20 OP_4 OP_ROLL OP_CAT 20 OP_CAT OP_2 OP_PICK OP_CAT OP_5 OP_ROLL OP_CAT OP_HASH256 aa20 OP_SWAP OP_CAT 87 OP_CAT OP_3 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_3 OP_PICK OP_3 OP_ROLL OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SWAP OP_TXLOCKTIME OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTVALUE e803 OP_NUMEQUAL OP_NIP",
  "source": "pragma cashscript ^0.11.0;\n\ncontract DomainFactory(\n  bytes registryContractScriptHash,\n  bytes domainContractPartialBytecodeHash,\n  bytes20 platformPKH\n) {\n  /**\n   * This function finalizes a domain registration auction by:\n   * - Verifying the auction has ended and the winner's bid is valid\n   * - Issuing a mutable heartbeat NFT to the domain contract\n   * - Issuing an immutable domain NFT to the auction winner\n   * - Distributing auction fees between platform and miners\n   *\n   * @param domainContractPartialBytecode - Partial bytecode of the domain contract to create\n   *\n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: First part of auction pair (immutable) containing auctionId + nameHash\n   * - Input3: Second part of auction pair (mutable) containing auctionId + endBlock + bidderLockingBytecode\n   *\n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: Domain NFT to auction winner\n   * - Output3: Heartbeat NFT to domain contract\n   * - Output4: Platform fee (only for first 4 years)\n   *\n   * Requirements:\n   * - Transaction must be at least 2 blocks old\n   * - Auction must have ended (current block > endBlock)\n   * - Domain contract bytecode must match expected hash\n   * - NFTs must have correct categories and capabilities\n   * - Platform fee split 50/50 with miners for first 4 years\n   */\n  function call(bytes domainContractPartialBytecode){\n    require(tx.inputs.length == 4);\n\n    // For the first 4 years, the platform collects 50% of the fees\n    if (int(tx.locktime) > 1093240) {\n      require(tx.outputs.length == 4);\n    } else {\n      require(tx.outputs.length == 5);\n      require(tx.outputs[5].lockingBytecode == new LockingBytecodeP2PKH(platformPKH));\n      // Enforce that the other half goes to the miners.\n      require(tx.outputs[5].value == tx.inputs[2].value / 2);\n    }\n\n    // Lock this contract to only be used with the registry contract.\n    require(tx.inputs[0].lockingBytecode == registryContractScriptHash);\n\n    // All the token categories in the transaction should be the same.\n    bytes domainCategory = tx.outputs[0].tokenCategory.split(32)[0];\n\n    // Ensure that the transaction is atleast 2 blocks old to let anyone prove that the domain is invalid.\n    // If no one is able to prove that the domain is invalid then the owner can claim the funds.\n    require(tx.age >= 2);\n\n    // The first part of the pair never changes, only the satoshi value changes, hence it's marked as immutable.\n    bytes pair0Category, bytes pair0Capability = tx.inputs[2].tokenCategory.split(32);\n    require(pair0Category == domainCategory);\n    require(pair0Capability == 0x00); // Immutable\n\n    // The second part of the pair changes with each new bid, hence it's marked as mutable.\n    bytes pair1Category, bytes pair1Capability = tx.inputs[3].tokenCategory.split(32);\n    require(pair1Category == domainCategory);\n    require(pair1Capability == 0x01); // Mutable\n\n    require(tx.inputs[2].lockingBytecode == registryContractScriptHash);\n    require(tx.inputs[2].lockingBytecode == tx.inputs[3].lockingBytecode);\n\n    bytes8 registrationAuctionIdPair0, bytes nameHash = tx.inputs[2].nftCommitment.split(8);\n    bytes8 registrationAuctionIdPair1, bytes remainingBytes0 = tx.inputs[3].nftCommitment.split(8);\n    bytes registrationAuctionEndBlock, bytes remainingBytes1 = remainingBytes0.split(4);\n    bytes bidderLockingBytecode, bytes1 isNameRevealed = remainingBytes1.split(1);\n    \n    // The must be revealed before this call\n    require(isNameRevealed == 0x01);\n    // Make sure that the auction has ended.\n    require(int(tx.locktime) > int(registrationAuctionEndBlock));\n    // Comfirm that the same piece of the pair are being used by matching the auctionId.\n    require(registrationAuctionIdPair0 == registrationAuctionIdPair1);\n\n    bytes bytecodeHash = hash160(domainContractPartialBytecode);\n    require(bytecodeHash == domainContractPartialBytecodeHash);\n    bytes domainBytecode = 0x20 + domainCategory + 0x20 + nameHash + domainContractPartialBytecode;\n    bytes32 scriptHash = hash256(domainBytecode);\n    bytes35 domainLockingBytecode = new LockingBytecodeP2SH32(scriptHash);\n\n    // Send the heartbeat NFT to the domain contract.\n    require(tx.outputs[3].lockingBytecode == domainLockingBytecode);\n\n    // Send the domain ownership NFT to the bidder\n    require(tx.outputs[2].nftCommitment == registrationAuctionIdPair0 + nameHash);\n    require(tx.outputs[3].lockingBytecode == bidderLockingBytecode);\n    require(tx.outputs[2].value == 1000);\n    // Send the heartbeat NFT to the domain contract.\n    require(tx.outputs[3].nftCommitment == registrationAuctionIdPair0 + bytes(tx.locktime));\n    require(tx.outputs[3].value == 1000);\n  }\n\n}",
  "debug": {
    "bytecode": "c3549c69c50378ae10a063c4549c6967c4559c6955cd0376a91454797e0288ac7e876955cc52c652969c696800c75179876900d101207f7552b27552ce01207f517a52798769007a0100876953ce01207f517a52798769007a51876952c7527a876952c753c7876952cf587f53cf587f007a547f007a517f007a518769c5527a81a0695379527a87695679a9007a557a87690120547a7e01207e52797e557a7e007aaa02aa20517a7e01877e53cd517a876952d25379537a7e876953cd517a876952cc02e8039c6953d2517ac57e876953cc02e8039c77",
    "sourceMap": "38:12:38:28;:32::33;:12:::1;:4::35;41:12:41:23:0;:27::34;:8:::1;:36:43:5:0;42:14:42:31;:35::36;:14:::1;:6::38;43:11:48:5:0;44:14:44:31;:35::36;:14:::1;:6::38;45:25:45:26:0;:14::43:1;:47::84:0;:72::83;;:47::84:1;;;:14;:6::86;47:25:47:26:0;:14::33:1;:47::48:0;:37::55:1;:58::59:0;:37:::1;:14;:6::61;43:11:48:5;51:22:51:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;54:38:54:39:0;:27::54:1;:61::63:0;:27::64:1;:::67;58:22:58:23:0;:4::25:1;;61:59:61:60:0;:49::75:1;:82::84:0;:49::85:1;62:12:62:25:0;;:29::43;;:12:::1;:4::45;63:12:63:27:0;;:31::35;:12:::1;:4::37;66:59:66:60:0;:49::75:1;:82::84:0;:49::85:1;67:12:67:25:0;;:29::43;;:12:::1;:4::45;68:12:68:27:0;;:31::35;:12:::1;:4::37;70:22:70:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;71:22:71:23:0;:12::40:1;:54::55:0;:44::72:1;:12;:4::74;73:66:73:67:0;:56::82:1;:89::90:0;:56::91:1;74:73:74:74:0;:63::89:1;:96::97:0;:63::98:1;75::75:78:0;;:85::86;:63::87:1;76:57:76:72:0;;:79::80;:57::81:1;79:12:79:26:0;;:30::34;:12:::1;:4::36;81:16:81:27:0;:35::62;;:31::63:1;:12;:4::65;83:12:83:38:0;;:42::68;;:12:::1;:4::70;85:33:85:62:0;;:25::63:1;86:12:86:24:0;;:28::61;;:12:::1;:4::63;87:27:87:31:0;:34::48;;:27:::1;:51::55:0;:27:::1;:58::66:0;;:27:::1;:69::98:0;;:27:::1;88:33:88:47:0;;:25::48:1;89:36:89:73:0;:62::72;;:36::73:1;;;92:23:92:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;95:23:95:24:0;:12::39:1;:43::69:0;;:72::80;;:43:::1;:12;:4::82;96:23:96:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;97:23:97:24:0;:12::31:1;:35::39:0;:12:::1;:4::41;99:23:99:24:0;:12::39:1;:43::69:0;;:78::89;:43::90:1;:12;:4::92;100:23:100:24:0;:12::31:1;:35::39:0;:12:::1;37:2:101:3",
    "logs": [],
    "requires": [
      {
        "ip": 6,
        "line": 38
      },
      {
        "ip": 14,
        "line": 42
      },
      {
        "ip": 19,
        "line": 44
      },
      {
        "ip": 29,
        "line": 45
      },
      {
        "ip": 37,
        "line": 47
      },
      {
        "ip": 44,
        "line": 51
      },
      {
        "ip": 51,
        "line": 58
      },
      {
        "ip": 62,
        "line": 62
      },
      {
        "ip": 67,
        "line": 63
      },
      {
        "ip": 77,
        "line": 67
      },
      {
        "ip": 82,
        "line": 68
      },
      {
        "ip": 88,
        "line": 70
      },
      {
        "ip": 94,
        "line": 71
      },
      {
        "ip": 115,
        "line": 79
      },
      {
        "ip": 121,
        "line": 81
      },
      {
        "ip": 127,
        "line": 83
      },
      {
        "ip": 136,
        "line": 86
      },
      {
        "ip": 163,
        "line": 92
      },
      {
        "ip": 172,
        "line": 95
      },
      {
        "ip": 178,
        "line": 96
      },
      {
        "ip": 183,
        "line": 97
      },
      {
        "ip": 191,
        "line": 99
      },
      {
        "ip": 196,
        "line": 100
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-03T18:03:10.309Z"
}