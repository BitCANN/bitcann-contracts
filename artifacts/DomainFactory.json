{
  "contractName": "DomainFactory",
  "constructorInputs": [
    {
      "name": "registryContractScriptHash",
      "type": "bytes"
    },
    {
      "name": "domainContractPartialBytecodeHash",
      "type": "bytes"
    },
    {
      "name": "platformPKH",
      "type": "bytes20"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": [
        {
          "name": "domainContractPartialBytecode",
          "type": "bytes"
        }
      ]
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_2 OP_INPUTSEQUENCENUMBER 805101 OP_GREATERTHAN OP_VERIFY OP_TXLOCKTIME 78ae10 OP_GREATERTHAN OP_IF OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTBYTECODE 76a914 OP_4 OP_PICK OP_CAT 88ac OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTVALUE OP_2 OP_UTXOVALUE OP_2 OP_DIV OP_NUMEQUALVERIFY OP_ENDIF OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_2 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_ROT OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_3 OP_UTXOBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_3 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_TXLOCKTIME OP_ROT OP_BIN2NUM OP_GREATERTHAN OP_VERIFY OP_3 OP_PICK OP_ROT OP_EQUALVERIFY OP_6 OP_PICK OP_HASH160 OP_5 OP_ROLL OP_EQUALVERIFY 20 OP_4 OP_ROLL OP_CAT OP_2 OP_PICK OP_SIZE OP_NIP OP_CAT OP_2 OP_PICK OP_CAT OP_5 OP_ROLL OP_CAT OP_HASH256 aa20 OP_SWAP OP_CAT 87 OP_CAT OP_3 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_3 OP_PICK OP_TXLOCKTIME OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_2SWAP OP_CAT OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_4 OP_OUTPUTVALUE e803 OP_NUMEQUAL OP_NIP",
  "source": "pragma cashscript ^0.11.0;\n\ncontract DomainFactory(\n  bytes registryContractScriptHash,\n  bytes domainContractPartialBytecodeHash,\n  bytes20 platformPKH\n) {\n  /**\n   * This function finalizes a domain registration auction by:\n   * - Verifying the auction has ended and the winner's bid is valid\n   * - Issuing a mutable heartbeat NFT to the domain contract\n   * - Issuing an immutable domain NFT to the auction winner\n   * - Distributing auction fees between platform and miners\n   *\n   * @param domainContractPartialBytecode - Partial bytecode of the domain contract to create\n   *\n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: RegistrationPair0 from the Registry contract\n   * - Input3: RegistrationPair1 from the Registry contract\n   *\n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: Heartbeat NFT to domain contract\n   * - Output3: Domain NFT to auction winner\n   * - Output4: Platform fee (only for first 4 years)\n   *\n   * Requirements:\n   * - Transaction must be at least 2 blocks old\n   * - Auction must have ended (current block > endBlock)\n   * - Domain contract bytecode must match expected hash\n   * - NFTs must have correct categories and capabilities\n   * - Platform fee split 50/50 with miners for first 4 years\n   */\n  function call(bytes domainContractPartialBytecode){\n    require(tx.inputs.length == 4);\n\n    // Make sure that the sequence number is greater than 1 day.\n    require(tx.inputs[2].sequenceNumber > 1 days);\n    // 1 unit is 512 seconds. 1 day is 86400 seconds. 86400 / 512 = ~168. or 1 days\n    // require(tx.inputs[2].sequenceNumber >= 1 days);\n\n    // For the first 4 years, the platform collects 50% of the fees\n    if (int(tx.locktime) > 1093240) {\n      require(tx.outputs.length == 4);\n    } else {\n      require(tx.outputs.length == 5);\n      require(tx.outputs[5].lockingBytecode == new LockingBytecodeP2PKH(platformPKH));\n      // Enforce that the other half goes to the miners.\n      require(tx.outputs[5].value == tx.inputs[2].value / 2);\n    }\n\n    // Lock this contract to only be used with the registry contract.\n    require(tx.inputs[0].lockingBytecode == registryContractScriptHash);\n\n    // All the token categories in the transaction should be the same.\n    bytes domainCategory = tx.outputs[0].tokenCategory.split(32)[0];\n\n    // Pair0 is immutable\n    require(tx.inputs[2].tokenCategory == domainCategory);\n\n    // The second part of the pair changes with each new bid, hence it's marked as mutable.\n    bytes pair1Category, bytes pair1Capability = tx.inputs[3].tokenCategory.split(32);\n    require(pair1Category == domainCategory);\n    require(pair1Capability == 0x01); // Mutable\n\n    require(tx.inputs[2].lockingBytecode == registryContractScriptHash);\n    require(tx.inputs[2].lockingBytecode == tx.inputs[3].lockingBytecode);\n\n    bytes8 registrationAuctionIdPair0, bytes name = tx.inputs[2].nftCommitment.split(8);\n    bytes8 registrationAuctionIdPair1, bytes remainingBytes = tx.inputs[3].nftCommitment.split(8);\n    bytes4 registrationAuctionEndBlock, bytes bidderLockingBytecode = remainingBytes.split(4);\n    \n    // Make sure that the auction has ended.\n    require(int(tx.locktime) > int(registrationAuctionEndBlock));\n    // Comfirm that the same piece of the pair are being used by matching the auctionId.\n    require(registrationAuctionIdPair0 == registrationAuctionIdPair1);\n\n    bytes bytecodeHash = hash160(domainContractPartialBytecode);\n    require(bytecodeHash == domainContractPartialBytecodeHash);\n\n    bytes domainBytecode = 0x20 + domainCategory + bytes(name.length) + name + domainContractPartialBytecode;\n    bytes32 scriptHash = hash256(domainBytecode);\n    bytes35 domainLockingBytecode = new LockingBytecodeP2SH32(scriptHash);\n\n    // Send the heartbeat NFT to the domain contract.\n    require(tx.outputs[3].lockingBytecode == domainLockingBytecode);\n    require(tx.outputs[3].nftCommitment == registrationAuctionIdPair0 + bytes(tx.locktime));\n    require(tx.outputs[3].value == 1000);\n\n    // Send the domain ownership NFT to the bidder\n    require(tx.outputs[4].nftCommitment == registrationAuctionIdPair0 + name);\n    require(tx.outputs[4].lockingBytecode == bidderLockingBytecode);\n    require(tx.outputs[4].value == 1000);\n  }\n\n}",
  "debug": {
    "bytecode": "c3549c6952cb03805101a069c50378ae10a063c4549c6967c4559c6955cd0376a91454797e0288ac7e876955cc52c652969c696800c75179876900d101207f7552ce5179876953ce01207f517a52798769007a51876952c7527a876952c753c7876952cf587f53cf587f007a547fc5527a81a0695379527a87695679a9007a557a87690120547a7e527982777e52797e557a7e007aaa02aa20517a7e01877e53cd517a876953d25379c57e876953cc02e8039c6954d2537a537a7e876954cd517a876954cc02e8039c77",
    "sourceMap": "38:12:38:28;:32::33;:12:::1;:4::35;41:22:41:23:0;:12::39:1;:42::48:0;:12:::1;:4::50;46:12:46:23:0;:27::34;:8:::1;:36:48:5:0;47:14:47:31;:35::36;:14:::1;:6::38;48:11:53:5:0;49:14:49:31;:35::36;:14:::1;:6::38;50:25:50:26:0;:14::43:1;:47::84:0;:72::83;;:47::84:1;;;:14;:6::86;52:25:52:26:0;:14::33:1;:47::48:0;:37::55:1;:58::59:0;:37:::1;:14;:6::61;48:11:53:5;56:22:56:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;59:38:59:39:0;:27::54:1;:61::63:0;:27::64:1;:::67;62:22:62:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;65:59:65:60:0;:49::75:1;:82::84:0;:49::85:1;66:12:66:25:0;;:29::43;;:12:::1;:4::45;67:12:67:27:0;;:31::35;:12:::1;:4::37;69:22:69:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;70:22:70:23:0;:12::40:1;:54::55:0;:44::72:1;:12;:4::74;72:62:72:63:0;:52::78:1;:85::86:0;:52::87:1;73:72:73:73:0;:62::88:1;:95::96:0;:62::97:1;74:70:74:84:0;;:91::92;:70::93:1;77:16:77:27:0;:35::62;;:31::63:1;:12;:4::65;79:12:79:38:0;;:42::68;;:12:::1;:4::70;81:33:81:62:0;;:25::63:1;82:12:82:24:0;;:28::61;;:12:::1;:4::63;84:27:84:31:0;:34::48;;:27:::1;:57::61:0;;:::68:1;;:27::69;:72::76:0;;:27:::1;:79::108:0;;:27:::1;85:33:85:47:0;;:25::48:1;86:36:86:73:0;:62::72;;:36::73:1;;;89:23:89:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;90:23:90:24:0;:12::39:1;:43::69:0;;:78::89;:43::90:1;:12;:4::92;91:23:91:24:0;:12::31:1;:35::39:0;:12:::1;:4::41;94:23:94:24:0;:12::39:1;:43::69:0;;:72::76;;:43:::1;:12;:4::78;95:23:95:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;96:23:96:24:0;:12::31:1;:35::39:0;:12:::1;37:2:97:3",
    "logs": [],
    "requires": [
      {
        "ip": 6,
        "line": 38
      },
      {
        "ip": 11,
        "line": 41
      },
      {
        "ip": 19,
        "line": 47
      },
      {
        "ip": 24,
        "line": 49
      },
      {
        "ip": 34,
        "line": 50
      },
      {
        "ip": 42,
        "line": 52
      },
      {
        "ip": 49,
        "line": 56
      },
      {
        "ip": 60,
        "line": 62
      },
      {
        "ip": 70,
        "line": 66
      },
      {
        "ip": 75,
        "line": 67
      },
      {
        "ip": 81,
        "line": 69
      },
      {
        "ip": 87,
        "line": 70
      },
      {
        "ip": 105,
        "line": 77
      },
      {
        "ip": 111,
        "line": 79
      },
      {
        "ip": 120,
        "line": 82
      },
      {
        "ip": 150,
        "line": 89
      },
      {
        "ip": 158,
        "line": 90
      },
      {
        "ip": 163,
        "line": 91
      },
      {
        "ip": 172,
        "line": 94
      },
      {
        "ip": 178,
        "line": 95
      },
      {
        "ip": 183,
        "line": 96
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-06T20:05:21.250Z"
}