{
  "contractName": "Domain",
  "constructorInputs": [
    {
      "name": "inactivityExpiryTime",
      "type": "bytes4"
    },
    {
      "name": "name",
      "type": "bytes"
    },
    {
      "name": "domainCategory",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "addRecord",
      "inputs": []
    },
    {
      "name": "externalUse",
      "inputs": []
    },
    {
      "name": "burn",
      "inputs": []
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_0 OP_UTXOTOKENCOMMITMENT OP_ROT OP_EQUALVERIFY OP_ROT OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_NIP OP_ELSE OP_3 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUAL OP_NIP OP_NIP OP_NIP OP_ELSE OP_3 OP_ROLL OP_2 OP_NUMEQUALVERIFY OP_TXVERSION OP_2 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_EQUAL OP_IF OP_0 OP_CHECKSEQUENCEVERIFY OP_DROP OP_1 OP_INPUTSEQUENCENUMBER OP_OVER OP_BIN2NUM OP_GREATERTHANOREQUAL OP_3 OP_INPUTSEQUENCENUMBER feffffff00 OP_LESSTHANOREQUAL OP_BOOLAND OP_VERIFY OP_ELSE OP_2 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_ENDIF OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_1 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_NIP OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\ncontract Domain(\n  bytes4 inactivityExpiryTime,\n  bytes name,\n  bytes domainCategory\n  ) {\n  /**\n   * Adds or invalidates a record associated with this domain.\n   * \n   * Records are created using OP_RETURN outputs.\n   * To add a record, include the record data directly in the OP_RETURN output.\n   * To invalidate a record, prefix \"RMV\" followed by the hash of the record content in the OP_RETURN output.\n   * This will signal the library/indexers to exclude the record from the valid records.\n   * \n   * @inputs\n   * - Input0: Internal Auth NFT\n   * - Input1: Domain ownership NFT from the owner\n   * - Input2: Funding UTXO (Can come from anywhere)\n   * \n   * @outputs  \n   * - Output0: Internal Auth NFT returned to this contract\n   * - Output1: Domain NFT returned to the owner\n   * - Output2: OP_RETURN containing record data or invalidation hash\n   * - Output3: BCH change output\n   * \n   */\n  function addRecord() {\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 4);\n\n    bytes activeLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n\n    require(tx.inputs[0].lockingBytecode == activeLockingBytecode);\n    require(tx.outputs[0].lockingBytecode == activeLockingBytecode);\n\n    require(tx.inputs[0].tokenCategory == domainCategory);\n    require(tx.inputs[1].tokenCategory == domainCategory);\n    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);\n    require(tx.inputs[1].tokenCategory == tx.outputs[1].tokenCategory);\n\n    require(tx.inputs[0].nftCommitment == tx.outputs[0].nftCommitment);\n    require(tx.inputs[1].nftCommitment == tx.outputs[1].nftCommitment);\n\n    bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[1].nftCommitment.split(8);\n    require(tx.inputs[0].nftCommitment == registrationId);\n    require(nameFromOwnerNFT == name);\n\n    // This enforces an OP_RETURN output.\n    require(tx.outputs[2].value == 0);\n    require(tx.outputs[3].tokenCategory == 0x);\n  }\n\n  /*\n   * Allows this to be attached to other contracts and prove that the domain is owned.\n   */\n  function externalUse() {\n    require(tx.inputs[this.activeInputIndex].nftCommitment == 0x);\n    require(tx.inputs[this.activeInputIndex].tokenCategory == domainCategory);\n\n    require(tx.outputs[this.activeInputIndex].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);\n    require(tx.outputs[this.activeInputIndex].tokenCategory == tx.inputs[this.activeInputIndex].tokenCategory);\n    require(tx.outputs[this.activeInputIndex].nftCommitment == tx.inputs[this.activeInputIndex].nftCommitment);\n    require(tx.outputs[this.activeInputIndex].value == tx.inputs[this.activeInputIndex].value);\n  }\n\n  /**\n   * Allows the domain owner or anyone to burn the domain by burning NFTs that control this contract.\n   * \n   * If the internalAuth NFT has not been used for more than 730 days, i.e., 2 years, then allow anyone to burn the domain.\n   * Always allow the owner to burn the domain NFTs.\n   *\n   * @inputs\n   * - Input0: Internal Auth NFT\n   * - Input1: External Auth NFT\n   * - Input2: Pure BCH or Domain ownership NFT from the owner\n   *\n   * @outputs \n   * - Output0: BCH change\n   *\n   */\n  function burn() {\n    require(tx.version == 2);\n\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 1);\n\n    if (tx.inputs[2].tokenCategory == 0x) {\n      // If pure BCH input, then allow anyone to burn given the time limit has passed.\n      // Using block-based\n      require(tx.age >= 0);\n      // Using block-based\n      // inactivityExpiryTime = 105120 blocks = 2 years\n      require(tx.inputs[1].sequenceNumber >= int(inactivityExpiryTime) && tx.inputs[3].sequenceNumber <= 4294967294);\n    } else {\n      // If domain ownership NFT input, then allow the owner to burn anytime.\n      require(tx.inputs[2].tokenCategory == domainCategory);\n      require(tx.inputs[2].nftCommitment.split(8)[0] == tx.inputs[0].nftCommitment);\n    }\n\n    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[1].lockingBytecode == selfLockingBytecode);\n\n    require(tx.inputs[0].nftCommitment == 0x);\n    require(tx.inputs[0].tokenCategory == tx.inputs[1].tokenCategory);\n    require(tx.inputs[0].tokenCategory == domainCategory);\n\n    // Return the BCH as change.\n    require(tx.outputs[0].tokenCategory == 0x);\n  }\n}\n",
  "debug": {
    "bytecode": "5379009c63c3539c69c4549c69c0c700c75179876900cd517a876900ce5379876951ce537a876900ce00d1876951ce51d1876900cf00d2876951cf51d2876951cf587f00cf527a8769007a527a876952cc009c6953d100877777675379519c63c0cf008769c0ce537a8769c0cdc0c78769c0d1c0ce8769c0d2c0cf8769c0ccc0c69c77777767537a529c69c2529c69c3539c69c4519c6952ce00876300b27551cb517981a253cb05feffffff00a19a696752ce5379876952cf587f7500cf876968c0c700c75179876951c7517a876900cf00876900ce51ce876900ce537a876900d1008777776868",
    "sourceMap": "28:2:52:3;;;;;29:12:29:28;:32::33;:12:::1;:4::35;30:12:30:29:0;:33::34;:12:::1;:4::36;32:44:32:65:0;:34::82:1;34:22:34:23:0;:12::40:1;:44::65:0;;:12:::1;:4::67;35:23:35:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;37:22:37:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;38:22:38:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;39:22:39:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;40:22:40:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;42:22:42:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;43:22:43:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;45:61:45:62:0;:51::77:1;:84::85:0;:51::86:1;46:22:46:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;47:12:47:28:0;;:32::36;;:12:::1;:4::38;50:23:50:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;51:23:51:24:0;:12::39:1;:43::45:0;:12:::1;28:2:52:3;;;57::65::0;;;;;58:22:58:43;:12::58:1;:62::64:0;:12:::1;:4::66;59:22:59:43:0;:12::58:1;:62::76:0;;:12:::1;:4::78;61:23:61:44:0;:12::61:1;:75::96:0;:65::113:1;:12;:4::115;62:23:62:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;63:23:63:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;64:23:64:44:0;:12::51:1;:65::86:0;:55::93:1;:12;57:2:65:3;;;;82::111::0;;;;;83:12:83:22;:26::27;:12:::1;:4::29;85:12:85:28:0;:32::33;:12:::1;:4::35;86:12:86:29:0;:33::34;:12:::1;:4::36;88:18:88:19:0;:8::34:1;:38::40:0;:8:::1;:42:95:5:0;91:24:91:25;:6::27:1;;94:24:94:25:0;:14::41:1;:49::69:0;;:45::70:1;:14;:84::85:0;:74::101:1;:105::115:0;:74:::1;:14;:6::117;95:11:99:5:0;97:24:97:25;:14::40:1;:44::58:0;;:14:::1;:6::60;98:24:98:25:0;:14::40:1;:47::48:0;:14::49:1;:::52;:66::67:0;:56::82:1;:14;:6::84;95:11:99:5;101:42:101:63:0;:32::80:1;102:22:102:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;103:22:103:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;105:22:105:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;106:22:106:23:0;:12::38:1;:52::53:0;:42::68:1;:12;:4::70;107:22:107:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;110:23:110:24:0;:12::39:1;:43::45:0;:12:::1;82:2:111:3;;3:0:112:1;",
    "logs": [],
    "requires": [
      {
        "ip": 11,
        "line": 29
      },
      {
        "ip": 15,
        "line": 30
      },
      {
        "ip": 23,
        "line": 34
      },
      {
        "ip": 29,
        "line": 35
      },
      {
        "ip": 35,
        "line": 37
      },
      {
        "ip": 41,
        "line": 38
      },
      {
        "ip": 47,
        "line": 39
      },
      {
        "ip": 53,
        "line": 40
      },
      {
        "ip": 59,
        "line": 42
      },
      {
        "ip": 65,
        "line": 43
      },
      {
        "ip": 75,
        "line": 46
      },
      {
        "ip": 81,
        "line": 47
      },
      {
        "ip": 86,
        "line": 50
      },
      {
        "ip": 91,
        "line": 51
      },
      {
        "ip": 103,
        "line": 58
      },
      {
        "ip": 109,
        "line": 59
      },
      {
        "ip": 115,
        "line": 61
      },
      {
        "ip": 121,
        "line": 62
      },
      {
        "ip": 127,
        "line": 63
      },
      {
        "ip": 133,
        "line": 64
      },
      {
        "ip": 145,
        "line": 83
      },
      {
        "ip": 149,
        "line": 85
      },
      {
        "ip": 153,
        "line": 86
      },
      {
        "ip": 160,
        "line": 91
      },
      {
        "ip": 173,
        "line": 94
      },
      {
        "ip": 180,
        "line": 97
      },
      {
        "ip": 189,
        "line": 98
      },
      {
        "ip": 198,
        "line": 102
      },
      {
        "ip": 204,
        "line": 103
      },
      {
        "ip": 209,
        "line": 105
      },
      {
        "ip": 215,
        "line": 106
      },
      {
        "ip": 221,
        "line": 107
      },
      {
        "ip": 226,
        "line": 110
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-10T13:35:23.964Z"
}