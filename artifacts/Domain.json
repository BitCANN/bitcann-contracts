{
  "contractName": "Domain",
  "constructorInputs": [
    {
      "name": "name",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "withdrawFunds",
      "inputs": []
    },
    {
      "name": "externalUse",
      "inputs": []
    },
    {
      "name": "addRecord",
      "inputs": []
    },
    {
      "name": "burn",
      "inputs": []
    }
  ],
  "bytecode": "OP_OVER OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_SIZE OP_NIP 20 OP_NUMNOTEQUAL OP_NIP OP_NIP OP_ELSE OP_OVER OP_1 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUAL OP_NIP OP_NIP OP_ELSE OP_OVER OP_2 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_0 OP_UTXOTOKENCOMMITMENT OP_ROT OP_EQUALVERIFY OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_ELSE OP_SWAP OP_3 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUAL OP_TXINPUTCOUNT OP_3 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUAL OP_IF OP_1 OP_INPUTSEQUENCENUMBER 0067c203 OP_GREATERTHANOREQUAL OP_VERIFY OP_ENDIF OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_1 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_TXINPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_ENDIF OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\ncontract Domain(bytes name) {\n\n  // Allow the owner to withdraw any funds but the immutable NFTs.\n  function withdrawFunds() {\n    require(tx.inputs[this.activeInputIndex].tokenCategory.length != 32);\n  }\n\n  /*\n   * Allow this to be attached to other contracts and prove that the domain is owned.\n   */\n  function externalUse(){\n    require(tx.inputs[this.activeInputIndex].nftCommitment == 0x);\n\n    require(tx.outputs[this.activeInputIndex].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);\n    require(tx.outputs[this.activeInputIndex].tokenCategory == tx.inputs[this.activeInputIndex].tokenCategory);\n    require(tx.outputs[this.activeInputIndex].nftCommitment == tx.inputs[this.activeInputIndex].nftCommitment);\n    require(tx.outputs[this.activeInputIndex].value == tx.inputs[this.activeInputIndex].value);\n  }\n\n\n  /**\n   * Adds or removes a record associated with this domain\n   * \n   * Records are stored in OP_RETURN outputs and can be added or removed by the domain owner.\n   * To add a record, include the record data directly in the OP_RETURN output.\n   * To remove a record, prefix \"RM\" followed by the hash of the record content in the OP_RETURN output.\n   * \n   * @inputs\n   * - Input0: Internal Auth NFT\n   * - Input1: Domain ownership NFT from owner\n   * - Input2: Funding UTXO\n   * \n   * @outputs  \n   * - Output0: Internal Auth NFT returned to this contract\n   * - Output1: Domain NFT returned to owner\n   * - Output2: OP_RETURN containing record data or removal hash\n   * - Output3: BCH change output\n   * \n   */\n  function addRecord() {\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 4);\n\n    bytes activeLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n\n    require(tx.inputs[0].lockingBytecode == activeLockingBytecode);\n    require(tx.outputs[0].lockingBytecode == activeLockingBytecode);\n\n    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);\n    require(tx.inputs[1].tokenCategory == tx.outputs[1].tokenCategory);\n\n    require(tx.inputs[0].nftCommitment == tx.outputs[0].nftCommitment);\n    require(tx.inputs[1].nftCommitment == tx.outputs[1].nftCommitment);\n\n    bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[1].nftCommitment.split(8);\n    require(tx.inputs[0].nftCommitment == registrationId);\n    require(nameFromOwnerNFT == name);\n\n    // This enforces an OP_RETURN output.\n    require(tx.outputs[2].value == 0);\n\n    require(tx.inputs[2].tokenCategory == 0x);\n    require(tx.outputs[3].tokenCategory == 0x);\n  }\n\n  /**\n   * Allows domain owner Or anyone to burn the domain by burning NFTs that control this contract.\n   * \n   * If the internalAuth NFT has not been used for > 730 days i.e 2 years, then allow anyone to burn the domain.\n   * else allow the owner to burn the domain NFTs\n   *\n   * @inputs\n   * - Input0: Internal Auth NFT\n   * - Input1: External Auth NFT\n   * - Input2: Domain ownership NFT from owner (Optional)\n   *\n   * @outputs \n   * - Output0: BCH change\n   *\n   */\n  function burn(){\n    require(tx.inputs.length == 2 || tx.inputs.length == 3);\n    require(tx.outputs.length == 1);\n\n    if(tx.inputs.length == 2){\n      // Allow anyone to burn.\n      require(tx.inputs[1].sequenceNumber >= 730 days);\n    }\n\n    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[1].lockingBytecode == selfLockingBytecode);\n\n    require(tx.inputs[0].nftCommitment == 0x);\n    require(tx.inputs[0].tokenCategory == tx.inputs[1].tokenCategory);\n\n    if(tx.inputs.length == 3){\n      require(tx.inputs[2].tokenCategory == tx.inputs[0].tokenCategory);\n      require(tx.inputs[2].nftCommitment.split(8)[0] == tx.inputs[0].nftCommitment);\n    }\n\n    // Return the BCH as change.\n    require(tx.outputs[0].tokenCategory == 0x);\n  }\n}\n",
  "debug": {
    "bytecode": "5179009c63c0ce827701209e7777675179519c63c0cf008769c0cdc0c78769c0d1c0ce8769c0d2c0cf8769c0ccc0c69c7777675179529c63c3539c69c4549c69c0c700c75179876900cd517a876900ce00d1876951ce51d1876900cf00d2876951cf51d2876951cf587f00cf527a8769007a517a876952cc009c6952ce00876953d100877767517a539c69c3529cc3539c9b69c4519c69c3529c6351cb040067c203a26968c0c700c75179876951c7517a876900cf00876900ce51ce8769c3539c6352ce00ce876952cf587f7500cf87696800d1008777686868",
    "sourceMap": "6:2:8:3;;;;;7:22:7:43;:12::58:1;:::65;;:69::71:0;:12:::1;6:2:8:3;;;13::20::0;;;;;14:22:14:43;:12::58:1;:62::64:0;:12:::1;:4::66;16:23:16:44:0;:12::61:1;:75::96:0;:65::113:1;:12;:4::115;17:23:17:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;18:23:18:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;19:23:19:44:0;:12::51:1;:65::86:0;:55::93:1;:12;13:2:20:3;;;42::66::0;;;;;43:12:43:28;:32::33;:12:::1;:4::35;44:12:44:29:0;:33::34;:12:::1;:4::36;46:44:46:65:0;:34::82:1;48:22:48:23:0;:12::40:1;:44::65:0;;:12:::1;:4::67;49:23:49:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;51:22:51:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;52:22:52:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;54:22:54:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;55:22:55:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;57:61:57:62:0;:51::77:1;:84::85:0;:51::86:1;58:22:58:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;59:12:59:28:0;;:32::36;;:12:::1;:4::38;62:23:62:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;64:22:64:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;65:23:65:24:0;:12::39:1;:43::45:0;:12:::1;42:2:66:3;;83::106::0;;;;;84:12:84:28;:32::33;:12:::1;:37::53:0;:57::58;:37:::1;:12;:4::60;85:12:85:29:0;:33::34;:12:::1;:4::36;87:7:87:23:0;:27::28;:7:::1;:29:90:5:0;89:24:89:25;:14::41:1;:45::53:0;:14:::1;:6::55;87:29:90:5;92:42:92:63:0;:32::80:1;93:22:93:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;94:22:94:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;96:22:96:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;97:22:97:23:0;:12::38:1;:52::53:0;:42::68:1;:12;:4::70;99:7:99:23:0;:27::28;:7:::1;:29:102:5:0;100:24:100:25;:14::40:1;:54::55:0;:44::70:1;:14;:6::72;101:24:101:25:0;:14::40:1;:47::48:0;:14::49:1;:::52;:66::67:0;:56::82:1;:14;:6::84;99:29:102:5;105:23:105:24:0;:12::39:1;:43::45:0;:12:::1;83:2:106:3;3:0:107:1;;",
    "logs": [],
    "requires": [
      {
        "ip": 12,
        "line": 7
      },
      {
        "ip": 24,
        "line": 14
      },
      {
        "ip": 30,
        "line": 16
      },
      {
        "ip": 36,
        "line": 17
      },
      {
        "ip": 42,
        "line": 18
      },
      {
        "ip": 48,
        "line": 19
      },
      {
        "ip": 59,
        "line": 43
      },
      {
        "ip": 63,
        "line": 44
      },
      {
        "ip": 71,
        "line": 48
      },
      {
        "ip": 77,
        "line": 49
      },
      {
        "ip": 83,
        "line": 51
      },
      {
        "ip": 89,
        "line": 52
      },
      {
        "ip": 95,
        "line": 54
      },
      {
        "ip": 101,
        "line": 55
      },
      {
        "ip": 111,
        "line": 58
      },
      {
        "ip": 117,
        "line": 59
      },
      {
        "ip": 122,
        "line": 62
      },
      {
        "ip": 127,
        "line": 64
      },
      {
        "ip": 132,
        "line": 65
      },
      {
        "ip": 146,
        "line": 84
      },
      {
        "ip": 150,
        "line": 85
      },
      {
        "ip": 159,
        "line": 89
      },
      {
        "ip": 168,
        "line": 93
      },
      {
        "ip": 174,
        "line": 94
      },
      {
        "ip": 179,
        "line": 96
      },
      {
        "ip": 185,
        "line": 97
      },
      {
        "ip": 195,
        "line": 100
      },
      {
        "ip": 204,
        "line": 101
      },
      {
        "ip": 210,
        "line": 105
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-07T16:38:57.635Z"
}