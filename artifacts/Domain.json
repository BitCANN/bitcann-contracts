{
  "contractName": "Domain",
  "constructorInputs": [
    {
      "name": "name",
      "type": "bytes"
    },
    {
      "name": "domainCategory",
      "type": "bytes32"
    }
  ],
  "abi": [
    {
      "name": "withdrawFunds",
      "inputs": []
    },
    {
      "name": "externalUse",
      "inputs": []
    },
    {
      "name": "addRecord",
      "inputs": []
    },
    {
      "name": "renounceOwnership",
      "inputs": []
    }
  ],
  "bytecode": "OP_2 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_ROT OP_EQUAL OP_NOT OP_NIP OP_NIP OP_ELSE OP_2 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_ROLL OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUAL OP_NIP OP_NIP OP_ELSE OP_2 OP_PICK OP_2 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_ROT OP_ROT OP_EQUALVERIFY OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_TXLOCKTIME OP_ROT OP_CAT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_ELSE OP_ROT OP_3 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_ROT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_EQUAL OP_NIP OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\n\n// INFO: It's important to mention the domainCategory here as anyone can send any utxo with matching NFT commitment and capability and create records. Hence, the\n// domainCategory should be a restriction in spending and creating records.\n\n// WARNING: Do not send the ownership NFT to the domain contract. It's like keeping the lock and key together.\n// Anyone will be able to call the `renounceOwnership` function burning the ownership and making it possible for a new auction to begin.\n\ncontract Domain(bytes name, bytes32 domainCategory) {\n\n  // // Prove that the heartbeat NFT is no longer valid and burn it. Opening this domain for new registration.\n  // function proveInactivity(){\n  //   // (tx.locktime - heartbeat >= 2 years);\n  //   // Allow burn\n  // }\n\n  // Allow the owner to withdraw any non domainCategory utxos\n  function withdrawFunds() {\n    bytes heartbeatCategory = tx.inputs[this.activeInputIndex].tokenCategory.split(32)[0];\n    require(heartbeatCategory != domainCategory);\n\n    // TODO: Add owner verification using heartbeat NFT + ownership NFT\n  }\n\n  /*\n   * This allows anyone to use the auth + heartbear NFT to use it with other contracts.\n   * For example: Other contracts (IllegalAuction) can prove that the domain is owned and has not been inactive for 2 years or more.\n   * and that acts as a security measure to eliminate illegal auctions.\n   */\n  function externalUse(){\n    bytes heartbeatCategory, bytes heartbeatCapability = tx.inputs[this.activeInputIndex].tokenCategory.split(32);\n    require(heartbeatCategory == domainCategory);\n    require(heartbeatCapability == 0x01); // Mutable\n\n    require(tx.outputs[this.activeInputIndex].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);\n    require(tx.outputs[this.activeInputIndex].tokenCategory == tx.inputs[this.activeInputIndex].tokenCategory);\n    require(tx.outputs[this.activeInputIndex].nftCommitment == tx.inputs[this.activeInputIndex].nftCommitment);\n    require(tx.outputs[this.activeInputIndex].value == tx.inputs[this.activeInputIndex].value);\n  }\n\n\n  /**\n   * Adds or removes a record associated with this domain\n   * \n   * Records are stored in OP_RETURN outputs and can be added or removed by the domain owner.\n   * To add a record, include the record data directly in the OP_RETURN output.\n   * To remove a record, prefix \"RM\" followed by the hash of the record content in the OP_RETURN output.\n   * \n   * @inputs\n   * - Input0: Heartbeat NFT from this domain contract\n   * - Input1: Domain ownership NFT from owner\n   * - Input2: Funding UTXO\n   * \n   * @outputs  \n   * - Output0: Heartbeat NFT returned to this contract\n   * - Output1: Domain NFT returned to owner\n   * - Output2: OP_RETURN containing record data or removal hash\n   * - Output3: BCH change output\n   * \n   */\n  function addRecord() {\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 4);\n\n    bytes activeLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.inputs[0].lockingBytecode == activeLockingBytecode);\n    require(tx.inputs[0].lockingBytecode == tx.outputs[0].lockingBytecode);\n\n    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);\n    require(tx.inputs[1].tokenCategory == tx.outputs[1].tokenCategory);\n\n    require(tx.inputs[1].nftCommitment == tx.outputs[1].nftCommitment);\n\n    bytes heartbeatCategory, bytes heartbeatCapability = tx.inputs[0].tokenCategory.split(32);\n    require(heartbeatCategory == domainCategory);\n    require(heartbeatCapability == 0x01); // Mutable\n\n    bytes heartbeatRegistrationId = tx.inputs[0].nftCommitment.split(8)[0];\n    bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[1].nftCommitment.split(8);\n\n    require(heartbeatRegistrationId == registrationId);\n\n    // Ensure that the NFT is verified.\n    require(nameFromOwnerNFT == name);\n\n    // TODO: FIX THIS\n    // Since a new record is added, update the heartbeat.\n    require(tx.outputs[0].nftCommitment == bytes(tx.locktime) + name);\n    // Immutable\n    require(tx.inputs[1].tokenCategory == domainCategory);\n\n    // This enforces an OP_RETURN output.\n    require(tx.outputs[2].value == 0);\n\n    require(tx.inputs[2].tokenCategory == 0x);\n    require(tx.outputs[3].tokenCategory == 0x);\n  }\n\n  /**\n   * Allows domain owner to renounce ownership by burning both NFTs\n   * \n   * This function enables permanent domain abandonment by:\n   * - Burning both the domain ownership NFT and heartbeat NFT\n   * - Returning any BCH value as change\n   * - Making the domain available for re-registration\n   *\n   * @inputs\n   * - Input0: Heartbeat NFT from domain contract\n   * - Input1: Domain ownership NFT from owner\n   *\n   * @outputs \n   * - Output0: BCH change (if any)\n   *\n   * Requirements:\n   * - Both NFTs must be from same registration\n   * - NFTs must have correct categories and capabilities\n   * - Only BCH change output allowed\n   */\n  function renounceOwnership(){\n    require(tx.inputs.length == 2);\n    require(tx.outputs.length == 1);\n\n    bytes activeLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.inputs[0].lockingBytecode == activeLockingBytecode);\n    require(tx.outputs[0].lockingBytecode == activeLockingBytecode);\n\n    bytes heartbeatCategory, bytes heartbeatCapability = tx.inputs[0].tokenCategory.split(32);\n    require(heartbeatCategory == domainCategory);\n    require(heartbeatCapability == 0x01); // Mutable\n\n        // Pure BCH\n    require(tx.outputs[0].tokenCategory == 0x);\n\n    // Immutable ownership NFT\n    require(tx.inputs[1].tokenCategory == domainCategory);\n\n    bytes heartbeatRegistrationId = tx.inputs[0].nftCommitment.split(8)[0];\n    bytes registrationId = tx.inputs[1].nftCommitment.split(8)[0];\n\n    require(heartbeatRegistrationId == registrationId);\n  }\n}\n",
  "debug": {
    "bytecode": "5279009c63c0ce01207f75007a527a87917777675279519c63c0ce01207f517a537a8769007a518769c0cdc0c78769c0d1c0ce8769c0d2c0cf8769c0ccc0c69c7777675279529c63c3539c69c4549c69c0c700c7517a876900c700cd876900ce00d1876951ce51d1876951cf51d2876900ce01207f517a53798769007a51876900cf587f7551cf587f527a527a8769007a5179876900d2c5527a7e876951ce517a876952cc009c6952ce00876953d100877767527a539c69c3529c69c4519c69c0c700c75179876900cd517a876900ce01207f517a53798769007a51876900d100876951ce527a876900cf587f7551cf587f75517a517a8777686868",
    "sourceMap": "19:2:24:3;;;;;20:40:20:61;:30::76:1;:83::85:0;:30::86:1;:::89;21:12:21:29:0;;:33::47;;:12:::1;;19:2:24:3;;;31::40::0;;;;;32:67:32:88;:57::103:1;:110::112:0;:57::113:1;33:12:33:29:0;;:33::47;;:12:::1;:4::49;34:12:34:31:0;;:35::39;:12:::1;:4::41;36:23:36:44:0;:12::61:1;:75::96:0;:65::113:1;:12;:4::115;37:23:37:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;38:23:38:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;39:23:39:44:0;:12::51:1;:65::86:0;:55::93:1;:12;31:2:40:3;;;62::98::0;;;;;63:12:63:28;:32::33;:12:::1;:4::35;64:12:64:29:0;:33::34;:12:::1;:4::36;66:44:66:65:0;:34::82:1;67:22:67:23:0;:12::40:1;:44::65:0;;:12:::1;:4::67;68:22:68:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;70:22:70:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;71:22:71:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;73:22:73:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;75:67:75:68:0;:57::83:1;:90::92:0;:57::93:1;76:12:76:29:0;;:33::47;;:12:::1;:4::49;77:12:77:31:0;;:35::39;:12:::1;:4::41;79:46:79:47:0;:36::62:1;:69::70:0;:36::71:1;:::74;80:61:80:62:0;:51::77:1;:84::85:0;:51::86:1;82:12:82:35:0;;:39::53;;:12:::1;:4::55;85:12:85:28:0;;:32::36;;:12:::1;:4::38;89:23:89:24:0;:12::39:1;:49::60:0;:64::68;;:43:::1;:12;:4::70;91:22:91:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;94:23:94:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;96:22:96:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;97:23:97:24:0;:12::39:1;:43::45:0;:12:::1;62:2:98:3;;120::142::0;;;;;121:12:121:28;:32::33;:12:::1;:4::35;122:12:122:29:0;:33::34;:12:::1;:4::36;124:44:124:65:0;:34::82:1;125:22:125:23:0;:12::40:1;:44::65:0;;:12:::1;:4::67;126:23:126:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;128:67:128::0;:57::83:1;:90::92:0;:57::93:1;129:12:129:29:0;;:33::47;;:12:::1;:4::49;130:12:130:31:0;;:35::39;:12:::1;:4::41;133:23:133:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;136:22:136:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;138:46:138:47:0;:36::62:1;:69::70:0;:36::71:1;:::74;139:37:139:38:0;:27::53:1;:60::61:0;:27::62:1;:::65;141:12:141:35:0;;:39::53;;:12:::1;120:2:142:3;10:0:143:1;;",
    "logs": [],
    "requires": [
      {
        "ip": 18,
        "line": 21
      },
      {
        "ip": 35,
        "line": 33
      },
      {
        "ip": 40,
        "line": 34
      },
      {
        "ip": 46,
        "line": 36
      },
      {
        "ip": 52,
        "line": 37
      },
      {
        "ip": 58,
        "line": 38
      },
      {
        "ip": 64,
        "line": 39
      },
      {
        "ip": 75,
        "line": 63
      },
      {
        "ip": 79,
        "line": 64
      },
      {
        "ip": 87,
        "line": 67
      },
      {
        "ip": 93,
        "line": 68
      },
      {
        "ip": 99,
        "line": 70
      },
      {
        "ip": 105,
        "line": 71
      },
      {
        "ip": 111,
        "line": 73
      },
      {
        "ip": 121,
        "line": 76
      },
      {
        "ip": 126,
        "line": 77
      },
      {
        "ip": 141,
        "line": 82
      },
      {
        "ip": 147,
        "line": 85
      },
      {
        "ip": 155,
        "line": 89
      },
      {
        "ip": 161,
        "line": 91
      },
      {
        "ip": 166,
        "line": 94
      },
      {
        "ip": 171,
        "line": 96
      },
      {
        "ip": 176,
        "line": 97
      },
      {
        "ip": 186,
        "line": 121
      },
      {
        "ip": 190,
        "line": 122
      },
      {
        "ip": 198,
        "line": 125
      },
      {
        "ip": 204,
        "line": 126
      },
      {
        "ip": 214,
        "line": 129
      },
      {
        "ip": 219,
        "line": 130
      },
      {
        "ip": 224,
        "line": 133
      },
      {
        "ip": 230,
        "line": 136
      },
      {
        "ip": 246,
        "line": 141
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-06T20:05:21.548Z"
}