{
  "contractName": "Domain",
  "constructorInputs": [
    {
      "name": "name",
      "type": "bytes"
    },
    {
      "name": "domainCategory",
      "type": "bytes32"
    }
  ],
  "abi": [
    {
      "name": "withdrawFunds",
      "inputs": []
    },
    {
      "name": "externalUse",
      "inputs": []
    },
    {
      "name": "addRecord",
      "inputs": []
    },
    {
      "name": "renounceOwnership",
      "inputs": []
    }
  ],
  "bytecode": "OP_2 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_ROT OP_EQUAL OP_NOT OP_NIP OP_NIP OP_ELSE OP_2 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_ROLL OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUAL OP_NIP OP_NIP OP_ELSE OP_2 OP_PICK OP_2 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_3 OP_LESSTHANOREQUAL OP_VERIFY OP_TXOUTPUTCOUNT OP_4 OP_LESSTHANOREQUAL OP_VERIFY OP_TXLOCKTIME 0065cd1d OP_LESSTHAN OP_VERIFY OP_0 OP_UTXOBYTECODE OP_ACTIVEBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_1 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_ROT OP_ROT OP_EQUALVERIFY OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_TXLOCKTIME OP_ROT OP_CAT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUAL OP_IF OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_DROP OP_1 OP_ELSE OP_ROT OP_3 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_ACTIVEBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_3 OP_ROLL OP_EQUALVERIFY 00 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_EQUAL OP_NIP OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\n\n// INFO: It's important to mention the domainCategory here as anyone can send any utxo with matching NFT commitment and capability and create records. Hence, the\n// domainCategory should be a restriction in spending and creating records.\n\n// WARNING: Do not send the ownership NFT to the domain contract. It's like keeping the lock and key together.\n// Anyone will be able to call the `renounceOwnership` function burning the ownership and making it possible for a new auction to begin.\n\ncontract Domain(bytes name, bytes32 domainCategory) {\n\n  // // Prove that the heartbeat NFT is no longer valid and burn it. Opening this domain for new registration.\n  // function proveInactivity(){\n  //   // (tx.locktime - heartbeat >= 2 years);\n  //   // Allow burn\n  // }\n\n  // Allow the owner to withdraw any non domainCategory utxos\n  function withdrawFunds() {\n    bytes heartbeatCategory = tx.inputs[this.activeInputIndex].tokenCategory.split(32)[0];\n    require(heartbeatCategory != domainCategory);\n\n    // TODO: Add owner verification using heartbeat NFT + ownership NFT\n  }\n\n  /*\n   * This allows anyone to use the auth + heartbear NFT to use it with other contracts.\n   * For example: Other contracts (IllegalAuction) can prove that the domain is owned and has not been inactive for 2 years or more.\n   * and that acts as a security measure to eliminate illegal auctions.\n   */\n  function externalUse(){\n    bytes heartbeatCategory, bytes heartbeatCapability = tx.inputs[this.activeInputIndex].tokenCategory.split(32);\n    require(heartbeatCategory == domainCategory);\n    require(heartbeatCapability == 0x01); // Mutable\n\n    require(tx.outputs[this.activeInputIndex].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);\n    require(tx.outputs[this.activeInputIndex].tokenCategory == tx.inputs[this.activeInputIndex].tokenCategory);\n    require(tx.outputs[this.activeInputIndex].nftCommitment == tx.inputs[this.activeInputIndex].nftCommitment);\n    require(tx.outputs[this.activeInputIndex].value == tx.inputs[this.activeInputIndex].value);\n  }\n\n\n  // Add record: just add\n  // Remove record: hash the record you wanted to remove and just use OP_RETURN(RM hash(content of record to be removed))\n  function addRecord(){\n    // Input0: The heartbeat NFT from self.\n    // Input1: The domain NFT owned by the owner.\n    // Input2: Transaction funding UTXO (optional)\n    require(tx.inputs.length <= 3);\n    // Output0: Input0 back to self.\n    // Output1: The domain NFT back to the owner.\n    // Output2: OP_RETURN to reveal the data.\n    // Output3: Change BCH (optional)\n    require(tx.outputs.length <= 4);\n\n    // Only provide support for blocks to reduce complexity in how nLocktime is used across different contracts.\n    require(tx.locktime < 500000000);\n\n    require(tx.inputs[0].lockingBytecode == this.activeBytecode);\n    require(tx.inputs[0].lockingBytecode == tx.outputs[0].lockingBytecode);\n    require(tx.inputs[1].lockingBytecode == tx.outputs[1].lockingBytecode);\n\n    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);\n    require(tx.inputs[1].tokenCategory == tx.outputs[1].tokenCategory);\n\n    require(tx.inputs[1].nftCommitment == tx.outputs[1].nftCommitment);\n\n    bytes heartbeatCategory, bytes heartbeatCapability = tx.inputs[0].tokenCategory.split(32);\n    require(heartbeatCategory == domainCategory);\n    require(heartbeatCapability == 0x01); // Mutable\n\n    bytes heartbeatRegistrationId = tx.inputs[0].nftCommitment.split(8)[0];\n    bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[1].nftCommitment.split(8);\n\n    require(heartbeatRegistrationId == registrationId);\n\n    // Ensure that the NFT is verified.\n    require(nameFromOwnerNFT == name);\n\n    // Since a new record is added, update the heartbeat.\n    require(tx.outputs[0].nftCommitment == bytes(tx.locktime) + name);\n    // Immutable\n    require(tx.inputs[1].tokenCategory == domainCategory);\n\n    // This enforces an OP_RETURN output.\n    require(tx.outputs[2].value == 0);\n\n    if(tx.inputs.length == 3){\n      // Pure BCH\n      require(tx.inputs[2].tokenCategory == 0x);\n    }\n\n    if(tx.outputs.length == 4){\n      // Pure BCH\n      require(tx.outputs[3].tokenCategory == 0x);\n    }\n  }\n\n  /**\n   * Allows domain owner to renounce ownership by burning both NFTs\n   * \n   * This function enables permanent domain abandonment by:\n   * - Burning both the domain ownership NFT and heartbeat NFT\n   * - Returning any BCH value as change\n   * - Making the domain available for re-registration\n   *\n   * @inputs\n   * - Input0: Heartbeat NFT from domain contract\n   * - Input1: Domain ownership NFT from owner\n   *\n   * @outputs \n   * - Output0: BCH change (if any)\n   *\n   * Requirements:\n   * - Both NFTs must be from same registration\n   * - NFTs must have correct categories and capabilities\n   * - Only BCH change output allowed\n   */\n  function renounceOwnership(){\n    require(tx.inputs.length == 2);\n    require(tx.outputs.length == 1);\n\n    // Pure BCH\n    require(tx.outputs[0].tokenCategory == 0x);\n\n    require(tx.inputs[0].lockingBytecode == this.activeBytecode);\n\n    bytes heartbeatCategory, bytes heartbeatCapability = tx.inputs[0].tokenCategory.split(32);\n    require(heartbeatCategory == domainCategory);\n    require(heartbeatCapability == 0x01); // Mutable\n\n    bytes ownerKeyCategory, bytes ownerKeyCapability = tx.inputs[1].tokenCategory.split(32);\n    require(ownerKeyCategory == domainCategory);\n    require(ownerKeyCapability == 0x00); // Immutable\n\n    bytes heartbeatRegistrationId = tx.inputs[0].nftCommitment.split(8)[0];\n    bytes registrationId = tx.inputs[1].nftCommitment.split(8)[0];\n\n    require(heartbeatRegistrationId == registrationId);\n  }\n}\n",
  "debug": {
    "bytecode": "5279009c63c0ce01207f75007a527a87917777675279519c63c0ce01207f517a537a8769007a518769c0cdc0c78769c0d1c0ce8769c0d2c0cf8769c0ccc0c69c7777675279529c63c353a169c454a169c5040065cd1d9f6900c7c1876900c700cd876951c751cd876900ce00d1876951ce51d1876951cf51d2876900ce01207f517a53798769007a51876900cf587f7551cf587f527a527a8769007a5179876900d2c5527a7e876951ce517a876952cc009c69c3539c6352ce00876968c4549c6353d100876968517767527a539c69c3529c69c4519c6900d100876900c7c1876900ce01207f517a53798769007a51876951ce01207f517a537a8769007a0100876900cf587f7551cf587f75517a517a8777686868",
    "sourceMap": "19:2:24:3;;;;;20:40:20:61;:30::76:1;:83::85:0;:30::86:1;:::89;21:12:21:29:0;;:33::47;;:12:::1;;19:2:24:3;;;31::40::0;;;;;32:67:32:88;:57::103:1;:110::112:0;:57::113:1;33:12:33:29:0;;:33::47;;:12:::1;:4::49;34:12:34:31:0;;:35::39;:12:::1;:4::41;36:23:36:44:0;:12::61:1;:75::96:0;:65::113:1;:12;:4::115;37:23:37:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;38:23:38:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;39:23:39:44:0;:12::51:1;:65::86:0;:55::93:1;:12;31:2:40:3;;;45::97::0;;;;;49:12:49:28;:32::33;:12:::1;:4::35;54:12:54:29:0;:33::34;:12:::1;:4::36;57:12:57:23:0;:26::35;:12:::1;:4::37;59:22:59:23:0;:12::40:1;:44::63:0;:12:::1;:4::65;60:22:60:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;61:22:61:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;63:22:63:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;64:22:64:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;66:22:66:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;68:67:68:68:0;:57::83:1;:90::92:0;:57::93:1;69:12:69:29:0;;:33::47;;:12:::1;:4::49;70:12:70:31:0;;:35::39;:12:::1;:4::41;72:46:72:47:0;:36::62:1;:69::70:0;:36::71:1;:::74;73:61:73:62:0;:51::77:1;:84::85:0;:51::86:1;75:12:75:35:0;;:39::53;;:12:::1;:4::55;78:12:78:28:0;;:32::36;;:12:::1;:4::38;81:23:81:24:0;:12::39:1;:49::60:0;:64::68;;:43:::1;:12;:4::70;83:22:83:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;86:23:86:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;88:7:88:23:0;:27::28;:7:::1;:29:91:5:0;90:24:90:25;:14::40:1;:44::46:0;:14:::1;:6::48;88:29:91:5;93:7:93:24:0;:28::29;:7:::1;:30:96:5:0;95:25:95:26;:14::41:1;:45::47:0;:14:::1;:6::49;93:30:96:5;45:2:97:3;;;119::140::0;;;;;120:12:120:28;:32::33;:12:::1;:4::35;121:12:121:29:0;:33::34;:12:::1;:4::36;124:23:124:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;126:22:126:23:0;:12::40:1;:44::63:0;:12:::1;:4::65;128:67:128:68:0;:57::83:1;:90::92:0;:57::93:1;129:12:129:29:0;;:33::47;;:12:::1;:4::49;130:12:130:31:0;;:35::39;:12:::1;:4::41;132:65:132:66:0;:55::81:1;:88::90:0;:55::91:1;133:12:133:28:0;;:32::46;;:12:::1;:4::48;134:12:134:30:0;;:34::38;:12:::1;:4::40;136:46:136:47:0;:36::62:1;:69::70:0;:36::71:1;:::74;137:37:137:38:0;:27::53:1;:60::61:0;:27::62:1;:::65;139:12:139:35:0;;:39::53;;:12:::1;119:2:140:3;10:0:141:1;;",
    "logs": [],
    "requires": [
      {
        "ip": 18,
        "line": 21
      },
      {
        "ip": 35,
        "line": 33
      },
      {
        "ip": 40,
        "line": 34
      },
      {
        "ip": 46,
        "line": 36
      },
      {
        "ip": 52,
        "line": 37
      },
      {
        "ip": 58,
        "line": 38
      },
      {
        "ip": 64,
        "line": 39
      },
      {
        "ip": 75,
        "line": 49
      },
      {
        "ip": 79,
        "line": 54
      },
      {
        "ip": 83,
        "line": 57
      },
      {
        "ip": 88,
        "line": 59
      },
      {
        "ip": 94,
        "line": 60
      },
      {
        "ip": 100,
        "line": 61
      },
      {
        "ip": 106,
        "line": 63
      },
      {
        "ip": 112,
        "line": 64
      },
      {
        "ip": 118,
        "line": 66
      },
      {
        "ip": 128,
        "line": 69
      },
      {
        "ip": 133,
        "line": 70
      },
      {
        "ip": 148,
        "line": 75
      },
      {
        "ip": 154,
        "line": 78
      },
      {
        "ip": 162,
        "line": 81
      },
      {
        "ip": 168,
        "line": 83
      },
      {
        "ip": 173,
        "line": 86
      },
      {
        "ip": 182,
        "line": 90
      },
      {
        "ip": 192,
        "line": 95
      },
      {
        "ip": 205,
        "line": 120
      },
      {
        "ip": 209,
        "line": 121
      },
      {
        "ip": 214,
        "line": 124
      },
      {
        "ip": 219,
        "line": 126
      },
      {
        "ip": 229,
        "line": 129
      },
      {
        "ip": 234,
        "line": 130
      },
      {
        "ip": 244,
        "line": 133
      },
      {
        "ip": 249,
        "line": 134
      },
      {
        "ip": 265,
        "line": 139
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-06T19:30:09.187Z"
}