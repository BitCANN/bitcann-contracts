{
  "contractName": "Domain",
  "constructorInputs": [
    {
      "name": "inactivityExpiryTime",
      "type": "int"
    },
    {
      "name": "name",
      "type": "bytes"
    },
    {
      "name": "domainCategory",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "addRecord",
      "inputs": []
    },
    {
      "name": "externalUse",
      "inputs": []
    },
    {
      "name": "resolveOwnerConflict",
      "inputs": []
    },
    {
      "name": "burn",
      "inputs": []
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_0 OP_UTXOTOKENCOMMITMENT OP_ROT OP_EQUALVERIFY OP_ROT OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_NIP OP_ELSE OP_3 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTBYTECODE OP_INPUTINDEX OP_UTXOBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_INPUTINDEX OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCOMMITMENT OP_INPUTINDEX OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTVALUE OP_INPUTINDEX OP_UTXOVALUE OP_NUMEQUAL OP_NIP OP_NIP OP_NIP OP_ELSE OP_3 OP_PICK OP_2 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCOMMITMENT OP_1 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_1 OP_UTXOTOKENCOMMITMENT OP_REVERSEBYTES OP_BIN2NUM OP_3 OP_UTXOTOKENCOMMITMENT OP_REVERSEBYTES OP_BIN2NUM OP_LESSTHAN OP_NIP OP_NIP OP_NIP OP_ELSE OP_3 OP_ROLL OP_3 OP_NUMEQUALVERIFY OP_TXVERSION OP_2 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_0 OP_EQUAL OP_IF OP_1 OP_INPUTSEQUENCENUMBER OP_OVER OP_NUMEQUALVERIFY OP_ELSE OP_2 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_DROP OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_ENDIF OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_1 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_PICK OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_3 OP_ROLL OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_NIP OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\ncontract Domain(\n  int inactivityExpiryTime,\n  bytes name,\n  bytes domainCategory\n  ) {\n  /**\n   * Adds or invalidates a record associated with this domain.\n   * \n   * Records are created using OP_RETURN outputs.\n   * To add a record, include the record data directly in the OP_RETURN output.\n   * To invalidate a record, prefix \"RMV\" followed by the hash of the record content in the OP_RETURN output.\n   * This will signal the library/indexers to exclude the record from the valid records.\n   * \n   * @inputs\n   * - Input0: Internal Auth NFT\n   * - Input1: Domain ownership NFT from the owner\n   * - Input2: Funding UTXO (Can come from anywhere)\n   * \n   * @outputs  \n   * - Output0: Internal Auth NFT returned to this contract\n   * - Output1: Domain NFT returned to the owner\n   * - Output2: OP_RETURN containing record data or invalidation hash\n   * - Output3: BCH change output\n   * \n   */\n  function addRecord() {\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 4);\n\n    bytes activeLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n\n    require(tx.inputs[0].lockingBytecode == activeLockingBytecode);\n    require(tx.outputs[0].lockingBytecode == activeLockingBytecode);\n\n    require(tx.inputs[0].tokenCategory == domainCategory);\n    require(tx.inputs[1].tokenCategory == domainCategory);\n    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);\n    require(tx.inputs[1].tokenCategory == tx.outputs[1].tokenCategory);\n\n    require(tx.inputs[0].nftCommitment == tx.outputs[0].nftCommitment);\n    require(tx.inputs[1].nftCommitment == tx.outputs[1].nftCommitment);\n\n    bytes registrationId, bytes nameFromOwnerNFT = tx.inputs[1].nftCommitment.split(8);\n    require(tx.inputs[0].nftCommitment == registrationId);\n    require(nameFromOwnerNFT == name);\n\n    // This enforces an OP_RETURN output.\n    require(tx.outputs[2].value == 0);\n    require(tx.outputs[3].tokenCategory == 0x);\n  }\n\n  /*\n   * Allows this to be attached to any transaction, primarily used by DomainOwnershipGuard\n   * to and prove that the domain is owned and burn the illegal auctionNFT.\n   *\n   * @inputs\n   * - Inputx: External Auth NFT\n   *\n   * @outputs\n   * - outputx: External Auth NFT back to seld\n   */\n  function externalUse() {\n    require(tx.inputs[this.activeInputIndex].nftCommitment == 0x);\n    require(tx.inputs[this.activeInputIndex].tokenCategory == domainCategory);\n\n    require(tx.outputs[this.activeInputIndex].lockingBytecode == tx.inputs[this.activeInputIndex].lockingBytecode);\n    require(tx.outputs[this.activeInputIndex].tokenCategory == tx.inputs[this.activeInputIndex].tokenCategory);\n    require(tx.outputs[this.activeInputIndex].nftCommitment == tx.inputs[this.activeInputIndex].nftCommitment);\n    require(tx.outputs[this.activeInputIndex].value == tx.inputs[this.activeInputIndex].value);\n  }\n\n  /**\n   * If the incentive system fails, i.e `DomainOwnershipGuard` or `AuctionConflictResolver` fails to prevent a\n   * a owner conflict. Which means there are more than 1 owner for this domain.\n   * \n   * The owner with the lowest registrationID must be the only owner for this domain.\n   * To help enforce this rule, this function will allow anyone to burn both the Auth NFTs of the NEW owner.\n   *\n   * @inputs\n   * - Input0: Valid External Auth NFT\n   * - Input1: Valid Internal Auth NFT\n   * - Input2: Invalid External Auth NFT\n   * - Input3: Invalid Internal Auth NFT\n   * - Input4: BCH input from anyone\n   * \n   * @outputs  \n   * - Output0: Valid External Auth NFT back to self\n   * - Output1: Valid Internal Auth NFT back to self\n   * - Output3: BCH change output\n   */\n  function resolveOwnerConflict(){\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length == 3);\n\n    require(tx.inputs[4].tokenCategory == 0x);\n    require(tx.outputs[2].tokenCategory == 0x);\n\n    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[1].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[2].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == selfLockingBytecode);\n\n    require(tx.outputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.outputs[1].lockingBytecode == selfLockingBytecode);\n\n    // External Auth NFTs\n    require(tx.inputs[0].nftCommitment == 0x);\n    require(tx.inputs[2].nftCommitment == 0x);\n\n    // Commitments of Valid Auth NFts back to self\n    require(tx.outputs[0].nftCommitment == 0x);\n    require(tx.outputs[1].nftCommitment == tx.inputs[1].nftCommitment);\n\n    // Ensure that all the token inputs and outputs have domainCategory\n    require(tx.inputs[0].tokenCategory == domainCategory);\n    require(tx.inputs[1].tokenCategory == domainCategory);\n    require(tx.inputs[2].tokenCategory == domainCategory);\n    require(tx.inputs[3].tokenCategory == domainCategory);\n\n    require(tx.outputs[0].tokenCategory == domainCategory);\n    require(tx.outputs[1].tokenCategory == domainCategory);\n\n    require(int(tx.inputs[1].nftCommitment.reverse()) < int(tx.inputs[3].nftCommitment.reverse()));\n  }\n\n  /**\n   * Allows the domain owner or anyone to burn the domain by burning AuthNFTs that control this contract.\n   * \n   * - Owner can burn the AuthNFTs anytime.\n   * - External party can burn the AuthNFTs when the internalAuth NFT has not been used for more than `inactivityExpiryTime`.\n   *\n   * @inputs\n   * - Input0: External Auth NFT\n   * - Input1: Internal Auth NFT\n   * - Input2: Pure BCH or Domain ownership NFT from the owner\n   *\n   * @outputs \n   * - Output0: BCH change\n   *\n   */\n  function burn() {\n    require(tx.version == 2);\n\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 1);\n\n    if (tx.inputs[2].tokenCategory == 0x) {\n      // If pure BCH input, then allow anyone to burn given the time limit has passed.\n      require(tx.inputs[1].sequenceNumber == inactivityExpiryTime);\n    } else {\n      // If domain ownership NFT input, then allow the owner to burn anytime.\n      require(tx.inputs[2].tokenCategory == domainCategory);\n      require(tx.inputs[2].nftCommitment.split(8)[0] == tx.inputs[0].nftCommitment);\n    }\n\n    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[1].lockingBytecode == selfLockingBytecode);\n\n    require(tx.inputs[0].nftCommitment == 0x);\n    require(tx.inputs[0].tokenCategory == tx.inputs[1].tokenCategory);\n    require(tx.inputs[0].tokenCategory == domainCategory);\n    require(tx.inputs[1].tokenCategory == domainCategory);\n\n    // Return the BCH as change.\n    require(tx.outputs[0].tokenCategory == 0x);\n  }\n}\n",
  "debug": {
    "bytecode": "5379009c63c3539c69c4549c69c0c700c75179876900cd517a876900ce5379876951ce537a876900ce00d1876951ce51d1876900cf00d2876951cf51d2876951cf587f00cf527a8769007a527a876952cc009c6953d100877777675379519c63c0cf008769c0ce537a8769c0cdc0c78769c0d1c0ce8769c0d2c0cf8769c0ccc0c69c777777675379529c63c3559c69c4539c6954ce00876952d1008769c0c700c75179876951c75179876952c75179876953c75179876900cd5179876951cd517a876900cf00876952cf00876900d200876951d251cf876900ce5379876951ce5379876952ce5379876953ce5379876900d15379876951d1537a876951cfbc8153cfbc819f77777767537a539c69c2529c69c3539c69c4519c6952ce00876351cb51799c696752ce5379876952cf587f7500cf876968c0c700c75179876951c7517a876900cf00876900ce51ce876900ce5379876951ce537a876900d100877777686868",
    "sourceMap": "28:2:52:3;;;;;29:12:29:28;:32::33;:12:::1;:4::35;30:12:30:29:0;:33::34;:12:::1;:4::36;32:44:32:65:0;:34::82:1;34:22:34:23:0;:12::40:1;:44::65:0;;:12:::1;:4::67;35:23:35:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;37:22:37:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;38:22:38:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;39:22:39:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;40:22:40:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;42:22:42:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;43:22:43:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;45:61:45:62:0;:51::77:1;:84::85:0;:51::86:1;46:22:46:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;47:12:47:28:0;;:32::36;;:12:::1;:4::38;50:23:50:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;51:23:51:24:0;:12::39:1;:43::45:0;:12:::1;28:2:52:3;;;64::72::0;;;;;65:22:65:43;:12::58:1;:62::64:0;:12:::1;:4::66;66:22:66:43:0;:12::58:1;:62::76:0;;:12:::1;:4::78;68:23:68:44:0;:12::61:1;:75::96:0;:65::113:1;:12;:4::115;69:23:69:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;70:23:70:44:0;:12::59:1;:73::94:0;:63::109:1;:12;:4::111;71:23:71:44:0;:12::51:1;:65::86:0;:55::93:1;:12;64:2:72:3;;;;93::127::0;;;;;94:12:94:28;:32::33;:12:::1;:4::35;95:12:95:29:0;:33::34;:12:::1;:4::36;97:22:97:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;98:23:98:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;100:42:100:63:0;:32::80:1;101:22:101:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;102:22:102:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;103:22:103:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;104:22:104:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;106:23:106:24:0;:12::41:1;:45::64:0;;:12:::1;:4::66;107:23:107:24:0;:12::41:1;:45::64:0;;:12:::1;:4::66;110:22:110:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;111:22:111:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;114:23:114:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;115:23:115:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;118:22:118:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;119:22:119:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;120:22:120:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;121:22:121:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;123:23:123:24:0;:12::39:1;:43::57:0;;:12:::1;:4::59;124:23:124:24:0;:12::39:1;:43::57:0;;:12:::1;:4::59;126:26:126:27:0;:16::42:1;:::52;:12::53;:70::71:0;:60::86:1;:::96;:56::97;:12;93:2:127:3;;;;144::170::0;;;;;145:12:145:22;:26::27;:12:::1;:4::29;147:12:147:28:0;:32::33;:12:::1;:4::35;148:12:148:29:0;:33::34;:12:::1;:4::36;150:18:150:19:0;:8::34:1;:38::40:0;:8:::1;:42:153:5:0;152:24:152:25;:14::41:1;:45::65:0;;:14:::1;:6::67;153:11:157:5:0;155:24:155:25;:14::40:1;:44::58:0;;:14:::1;:6::60;156:24:156:25:0;:14::40:1;:47::48:0;:14::49:1;:::52;:66::67:0;:56::82:1;:14;:6::84;153:11:157:5;159:42:159:63:0;:32::80:1;160:22:160:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;161:22:161:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;163:22:163:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;164:22:164:23:0;:12::38:1;:52::53:0;:42::68:1;:12;:4::70;165:22:165:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;166:22:166:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;169:23:169:24:0;:12::39:1;:43::45:0;:12:::1;144:2:170:3;;3:0:171:1;;",
    "logs": [],
    "requires": [
      {
        "ip": 11,
        "line": 29
      },
      {
        "ip": 15,
        "line": 30
      },
      {
        "ip": 23,
        "line": 34
      },
      {
        "ip": 29,
        "line": 35
      },
      {
        "ip": 35,
        "line": 37
      },
      {
        "ip": 41,
        "line": 38
      },
      {
        "ip": 47,
        "line": 39
      },
      {
        "ip": 53,
        "line": 40
      },
      {
        "ip": 59,
        "line": 42
      },
      {
        "ip": 65,
        "line": 43
      },
      {
        "ip": 75,
        "line": 46
      },
      {
        "ip": 81,
        "line": 47
      },
      {
        "ip": 86,
        "line": 50
      },
      {
        "ip": 91,
        "line": 51
      },
      {
        "ip": 103,
        "line": 65
      },
      {
        "ip": 109,
        "line": 66
      },
      {
        "ip": 115,
        "line": 68
      },
      {
        "ip": 121,
        "line": 69
      },
      {
        "ip": 127,
        "line": 70
      },
      {
        "ip": 133,
        "line": 71
      },
      {
        "ip": 145,
        "line": 94
      },
      {
        "ip": 149,
        "line": 95
      },
      {
        "ip": 154,
        "line": 97
      },
      {
        "ip": 159,
        "line": 98
      },
      {
        "ip": 167,
        "line": 101
      },
      {
        "ip": 173,
        "line": 102
      },
      {
        "ip": 179,
        "line": 103
      },
      {
        "ip": 185,
        "line": 104
      },
      {
        "ip": 191,
        "line": 106
      },
      {
        "ip": 197,
        "line": 107
      },
      {
        "ip": 202,
        "line": 110
      },
      {
        "ip": 207,
        "line": 111
      },
      {
        "ip": 212,
        "line": 114
      },
      {
        "ip": 218,
        "line": 115
      },
      {
        "ip": 224,
        "line": 118
      },
      {
        "ip": 230,
        "line": 119
      },
      {
        "ip": 236,
        "line": 120
      },
      {
        "ip": 242,
        "line": 121
      },
      {
        "ip": 248,
        "line": 123
      },
      {
        "ip": 254,
        "line": 124
      },
      {
        "ip": 264,
        "line": 126
      },
      {
        "ip": 276,
        "line": 145
      },
      {
        "ip": 280,
        "line": 147
      },
      {
        "ip": 284,
        "line": 148
      },
      {
        "ip": 295,
        "line": 152
      },
      {
        "ip": 302,
        "line": 155
      },
      {
        "ip": 311,
        "line": 156
      },
      {
        "ip": 320,
        "line": 160
      },
      {
        "ip": 326,
        "line": 161
      },
      {
        "ip": 331,
        "line": 163
      },
      {
        "ip": 337,
        "line": 164
      },
      {
        "ip": 343,
        "line": 165
      },
      {
        "ip": 349,
        "line": 166
      },
      {
        "ip": 354,
        "line": 169
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-17T12:23:42.033Z"
}