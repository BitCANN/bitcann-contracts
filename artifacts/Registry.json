{
  "contractName": "Registry",
  "constructorInputs": [
    {
      "name": "domainCategory",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOVALUE OP_0 OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE OP_1 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_1 OP_UTXOVALUE OP_1 OP_OUTPUTVALUE OP_NUMEQUAL",
  "source": "pragma cashscript ^0.11.0;\n\n\ncontract Registry(bytes domainCategory) {\n  /**\n   * The Registry contract serves as both a source and storage for authorized NFTs.\n   * It holds NFTs with immutable capability that share the same category as domainCategory.\n   * These NFTs contain the lockingBytecode of authorized contracts.\n   * Multiple copies of these NFTs enable parallel processing through multiple threads.\n   * \n   * The contract can only be called in conjunction with one of the authorized contracts.\n   * \n   * @note Authorized contracts and their thread counts:\n   * - Auction:           [1 thread] (Single-threaded registration)\n   * - DomainFactory:                 [~5 threads]\n   * - DomainNameShield:              [~5 threads]\n   * - IllegalRegistration:           [~5 threads]\n   * - RegistrationConflict:          [~5 threads]\n   * \n   * @inputs\n   * - Input0: Registry contract's immutable NFT\n   * - Input1: Authorized contract's UTXO\n   * \n   * @outputs\n   * - Output0: Registry contract's NFT returned unchanged\n   * - Output1: Authorized contract's UTXO returned unchanged\n   */\n  function call() {\n    // Registry Contract\n\n    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    require(tx.outputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);\n\n    // Make sure that the NFT stays with the contract.\n    require(tx.inputs[0].tokenCategory == tx.outputs[0].tokenCategory);\n    require(tx.inputs[0].nftCommitment == tx.outputs[0].nftCommitment);\n    require(tx.inputs[0].value == tx.outputs[0].value);\n    // Just check the length of tokenCategory to be 32 as immutable NFTs do not have capability.\n    require(tx.inputs[0].tokenCategory == domainCategory);\n\n    // Script Contract (Contract Composition)\n\n    // Expect the NFT commitment that contains the lockingBytecode of the eligible contract.\n    require(tx.inputs[1].lockingBytecode == tx.inputs[0].nftCommitment);\n    // Ensure the utxo from the contract goes back to the it.\n    require(tx.inputs[1].lockingBytecode == tx.outputs[1].lockingBytecode);\n    // Ensure that the value is the same (Removes the risk of getting funds stuck by attaching them to an incorrect output)\n    require(tx.inputs[1].value == tx.outputs[1].value);\n    // Note: Since the inputs and outputs are strictly locked, there is no need to check for\n    // token category, token amount and nftCommitment for inputs[1] and outputs[1].\n\n    // With these pre-requisites met, we just need to make sure that all the contracts that are deployed are written and initialized\n    // properly, and they expect this structure and handle the inputs and outputs as expected.\n  }\n\n\n  // /**\n  //  * @inputs\n  //  * - Input0: Minting NFT + tokenAmount0\n  //  * - Input1: Authorized contract's UTXO + tokenAmount1\n  //  * \n  //  * @outputs\n  //  * - Output0: Minting NFT back to the Registry contract + tokenAmount (tokenAmount0 + tokenAmount1)\n  //  * - Output1: Authorized contract's UTXO back to the Registry contract\n  //  * - Output2: Change BCH\n  //  */\n  // function accumulateTokens(){\n  //   // require(tx.inputs.length == 2);\n  //   // require(tx.outputs.length == 3);\n\n  //   // TEMP\n  //   require(tx.inputs.length >= 1);\n  //   require(tx.outputs.length >= 1);\n  // }\n}\n",
  "debug": {
    "bytecode": "c0c700cd5179876900c7517a876900ce00d1876900cf00d2876900c600cc9c6900ce517a876951c700cf876951c751cd876951c651cc9c",
    "sourceMap": "31:42:31:63;:32::80:1;32:23:32:24:0;:12::41:1;:45::64:0;;:12:::1;:4::66;33:22:33:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;36:22:36:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;37:22:37:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;38:22:38:23:0;:12::30:1;:45::46:0;:34::53:1;:12;:4::55;40:22:40:23:0;:12::38:1;:42::56:0;;:12:::1;:4::58;45:22:45:23:0;:12::40:1;:54::55:0;:44::70:1;:12;:4::72;47:22:47:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;49:22:49:23:0;:12::30:1;:45::46:0;:34::53:1;:12",
    "logs": [],
    "requires": [
      {
        "ip": 8,
        "line": 32
      },
      {
        "ip": 14,
        "line": 33
      },
      {
        "ip": 20,
        "line": 36
      },
      {
        "ip": 26,
        "line": 37
      },
      {
        "ip": 32,
        "line": 38
      },
      {
        "ip": 38,
        "line": 40
      },
      {
        "ip": 44,
        "line": 45
      },
      {
        "ip": 50,
        "line": 47
      },
      {
        "ip": 56,
        "line": 49
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-06T20:05:20.363Z"
}