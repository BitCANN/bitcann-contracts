{
  "contractName": "Auction",
  "constructorInputs": [
    {
      "name": "registryContractScriptHash",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "withdraw",
      "inputs": [
        {
          "name": "signature",
          "type": "sig"
        },
        {
          "name": "pk",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "call",
      "inputs": [
        {
          "name": "name",
          "type": "bytes"
        }
      ]
    }
  ],
  "bytecode": "OP_OVER OP_0 OP_NUMEQUAL OP_IF OP_2SWAP OP_SWAP OP_CHECKSIG OP_NIP OP_NIP OP_ELSE OP_SWAP OP_1 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_LESSTHANOREQUAL OP_VERIFY OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_REVERSEBYTES OP_BIN2NUM OP_2 OP_OUTPUTTOKENCOMMITMENT OP_REVERSEBYTES OP_BIN2NUM OP_SWAP OP_1ADD OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_3 OP_OUTPUTVALUE 2003 OP_GREATERTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_2 OP_OUTPUTTOKENCOMMITMENT OP_3 OP_PICK OP_CAT OP_EQUALVERIFY OP_TXLOCKTIME 9000 OP_ADD OP_2 OP_OUTPUTTOKENCOMMITMENT OP_SWAP OP_CAT OP_3 OP_UTXOBYTECODE OP_CAT OP_4 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_ROT OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_5 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTBYTECODE 6a OP_ROT OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUAL OP_IF OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_1 OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\ncontract Auction(bytes registryContractScriptHash) {\n\n  function withdraw(sig signature, pubkey pk){\n    require(checkSig(signature, pk));\n  }\n\n  /**\n   * Starts a new domain registration auction\n   * @param name The name being registered.\n   * \n   * The function creates a new auction with:\n   * - Starting bid >= 0.025 BCH\n   * - Registration auction duration runs for 144 blocks (~1 day), if a new bid is made with less than 72 blocks left, the auction duration is extended by 72 blocks.\n   * - A successful registration initiations results in two NFT pairs representing the auction state:\n   *   1. (Immutable) NFT with registrationId(8 bytes) + name(32 bytes) + satoshi value attached to the utxo\n   *   2. (Mutable) NFT with registrationId(8 bytes) + auctionEndBlock(4 bytes) + bidder's lockingBytecode(25 bytes)\n   * - The counter, pair and domain name all have the same token category.\n   * \n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: Counter NFT from Registry contract (Increases the registrationId by 1 in the output) \n   * - Input3: Funding UTXO\n   * \n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: Counter NFT going back to the Registry contract\n   * - Output3: RegistrationPair0 to the Registry contract\n   * - Output4: RegistrationPair1 to the Registry contract\n   * - Output5: OP_RETURN output containing the name\n   * - Output6: Optional change in BCH\n   */\n  function call(bytes name){\n    require(tx.inputs.length == 4);\n    require(tx.outputs.length <= 7);\n    // Lock this contract to only be used with the registry contract.\n    require(tx.inputs[0].lockingBytecode == registryContractScriptHash);\n    // All the input and output conditions for inputs[0], inputs[1], outputs[0] and outputs[1] are already checked in the registry contract.\n    // Needs fewer operations with this approach as it would require this code to check 0th and 1st input and output in all other contracts.\n\n    // Ensure that the counter NFT is incremented by 1 with each transaction.\n    int prevRegistrationId = int(tx.inputs[2].nftCommitment.reverse());\n    int nextRegistrationId = int(tx.outputs[2].nftCommitment.reverse());\n    require(nextRegistrationId == prevRegistrationId + 1);\n  \n    // Inputs[3] is the funding UTXO\n    require(tx.inputs[3].tokenCategory == 0x);\n    // // Every auction begins with a base value of atleast 0.025 BCH.\n    // require(tx.outputs[3].value >= 2500000);\n\n    // FOR TESTS: Every auction begins with a base value of atleast 0.000008 BCH.\n    require(tx.outputs[3].value >= 800);\n\n    // Create the first piece of the registration pair. i.e Pair0\n    // Note: outputs[2] nftcommitment is the new registrationAuctionId\n    require(tx.outputs[3].nftCommitment == tx.outputs[2].nftCommitment + name);\n\n    int auctionEndBlock = tx.locktime + 144;\n    \n    // Create the second piece of the registration pair. i.e Pair1\n    // registrationAuctionId + registrationAuctionEndBlock + lockingBytecode of the funder\n    // <auctionId> + <endBlock> + <lockingBytecode> = 8 bytes + 4 bytes + 25 bytes = 37 bytes\n    bytes registrationCommitment1 = tx.outputs[2].nftCommitment + bytes(auctionEndBlock) + tx.inputs[3].lockingBytecode;\n    require(tx.outputs[4].nftCommitment == registrationCommitment1);\n\n    // All the token categories in the transaction should be the same.\n    bytes domainCategory = tx.outputs[0].tokenCategory.split(32)[0];\n\n    require(tx.outputs[2].tokenCategory == tx.outputs[2].tokenCategory);\n    bytes idCounterCategory, bytes idCounterCapability = tx.outputs[2].tokenCategory.split(32);\n    require(idCounterCategory == domainCategory);\n    require(idCounterCapability == 0x02); // Minting\n\n    // Immutable\n    require(tx.outputs[3].tokenCategory == domainCategory);\n\n    // Pair1 changes with each new bid (locking bytecode), hence it's capability is mutable.\n    bytes pair1Category, bytes pair1Capability = tx.outputs[4].tokenCategory.split(32);\n    require(pair1Category == domainCategory);\n    require(pair1Capability == 0x01); // Mutable\n\n    // Ensure that the Counter, Pair0 and Pair1 NFTs going to the Registration Contract.\n    require(tx.inputs[2].lockingBytecode == registryContractScriptHash);\n    require(tx.outputs[2].lockingBytecode == registryContractScriptHash);\n    require(tx.outputs[3].lockingBytecode == registryContractScriptHash);\n    require(tx.outputs[4].lockingBytecode == registryContractScriptHash);\n\n    // Enforce an OP_RETURN output.\n    require(tx.outputs[5].value == 0);\n    require(tx.outputs[5].lockingBytecode == new LockingBytecodeNullData([name]));\n\n    if(tx.outputs.length == 7){\n      // If any change then it must be pure BCH\n      require(tx.outputs[6].tokenCategory == 0x);\n    }\n  }\n}",
  "debug": {
    "bytecode": "5179009c63527a537aac777767517a519c69c3549c69c457a16900c75179876952cfbc8152d2bc81007a517a51939c6953ce00876953cc022003a26953d252d253797e8769c50290009352d2517a7e53c77e54d2517a876900d101207f7552d152d1876952d101207f517a52798769007a52876953d15179876954d101207f517a527a8769007a51876952c75179876952cd5179876953cd5179876954cd517a876955cc009c6955cd016a527a8276014ba063014c7c7e687c7e7e8769c4579c6356d1008769685168",
    "sourceMap": "5:2:7:3;;;;;6:21:6:30;;:32::34;;:12::35:1;5:2:7:3;;;36::99::0;;;;;37:12:37:28;:32::33;:12:::1;:4::35;38:12:38:29:0;:33::34;:12:::1;:4::36;40:22:40:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;45:43:45:44:0;:33::59:1;:::69;:29::70;46:44:46:45:0;:33::60:1;:::70;:29::71;47:12:47:30:0;;:34::52;;:55::56;:34:::1;:12;:4::58;50:22:50:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;55:23:55:24:0;:12::31:1;:35::38:0;:12:::1;:4::40;59:23:59:24:0;:12::39:1;:54::55:0;:43::70:1;:73::77:0;;:43:::1;:12;:4::79;61:26:61:37:0;:40::43;:26:::1;66:47:66:48:0;:36::63:1;:72::87:0;;:36::88:1;:101::102:0;:91::119:1;:36;67:23:67:24:0;:12::39:1;:43::66:0;;:12:::1;:4::68;70:38:70:39:0;:27::54:1;:61::63:0;:27::64:1;:::67;72:23:72:24:0;:12::39:1;:54::55:0;:43::70:1;:12;:4::72;73:68:73:69:0;:57::84:1;:91::93:0;:57::94:1;74:12:74:29:0;;:33::47;;:12:::1;:4::49;75:12:75:31:0;;:35::39;:12:::1;:4::41;78:23:78:24:0;:12::39:1;:43::57:0;;:12:::1;:4::59;81:60:81:61:0;:49::76:1;:83::85:0;:49::86:1;82:12:82:25:0;;:29::43;;:12:::1;:4::45;83:12:83:27:0;;:31::35;:12:::1;:4::37;86:22:86:23:0;:12::40:1;:44::70:0;;:12:::1;:4::72;87:23:87:24:0;:12::41:1;:45::71:0;;:12:::1;:4::73;88:23:88:24:0;:12::41:1;:45::71:0;;:12:::1;:4::73;89:23:89:24:0;:12::41:1;:45::71:0;;:12:::1;:4::73;92:23:92:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;93:23:93:24:0;:12::41:1;:45::80:0;:74::78;;::::1;;;;;;;;;;;;:12::80;:4::82;95:7:95:24:0;:28::29;:7:::1;:30:98:5:0;97:25:97:26;:14::41:1;:45::47:0;:14:::1;:6::49;95:30:98:5;36:2:99:3;3:0:100:1",
    "logs": [],
    "requires": [
      {
        "ip": 11,
        "line": 6
      },
      {
        "ip": 22,
        "line": 37
      },
      {
        "ip": 26,
        "line": 38
      },
      {
        "ip": 32,
        "line": 40
      },
      {
        "ip": 48,
        "line": 47
      },
      {
        "ip": 53,
        "line": 50
      },
      {
        "ip": 58,
        "line": 55
      },
      {
        "ip": 67,
        "line": 59
      },
      {
        "ip": 84,
        "line": 67
      },
      {
        "ip": 95,
        "line": 72
      },
      {
        "ip": 105,
        "line": 74
      },
      {
        "ip": 110,
        "line": 75
      },
      {
        "ip": 116,
        "line": 78
      },
      {
        "ip": 126,
        "line": 82
      },
      {
        "ip": 131,
        "line": 83
      },
      {
        "ip": 137,
        "line": 86
      },
      {
        "ip": 143,
        "line": 87
      },
      {
        "ip": 149,
        "line": 88
      },
      {
        "ip": 155,
        "line": 89
      },
      {
        "ip": 160,
        "line": 92
      },
      {
        "ip": 179,
        "line": 93
      },
      {
        "ip": 188,
        "line": 97
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-06T08:17:56.515Z"
}