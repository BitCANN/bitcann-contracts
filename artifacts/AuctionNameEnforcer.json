{
  "contractName": "AuctionNameEnforcer",
  "constructorInputs": [],
  "abi": [
    {
      "name": "call",
      "inputs": [
        {
          "name": "characterNumber",
          "type": "int"
        }
      ]
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_2 OP_UTXOTOKENAMOUNT OP_ADD OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT 14 OP_SPLIT OP_NIP OP_OVER OP_SPLIT OP_DROP OP_OVER OP_1SUB OP_SPLIT OP_NIP OP_BIN2NUM OP_DUP 61 7b OP_WITHIN OP_NOT OP_OVER 41 5b OP_WITHIN OP_NOT OP_BOOLOR OP_OVER 30 3a OP_WITHIN OP_NOT OP_BOOLOR OP_SWAP 2d OP_NUMNOTEQUAL OP_BOOLOR OP_VERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP",
  "source": "pragma cashscript ^0.11.0;\n\ncontract AuctionNameEnforcer() {\n    /**\n   * Proves that a domain name contains invalid characters and burns the associated NFT and takes away the funds as reward.\n   * During the entire auction, this can be called anytime by anyone.\n   * \n   * Rules:\n   * 1. The name must consist of only these characters\n   *    - Letters (a-z or A-Z)\n   *    - Numbers (0-9)\n   *    - Hyphens (-)\n   *\n   * @param characterNumber - Number of the character in the name that is invalid (starting from 1)\n   *\n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: auctionNFT\n   *\n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: Reward to caller\n   *\n   */\n  function call(int characterNumber) {\n    require(tx.inputs.length == 3);\n    require(tx.outputs.length == 3);\n\n    // This contract can only be used at input1 and it should return to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n\n    // Lock this contract to only be used with the registry type contract.\n    bytes parentContractScriptHash = tx.inputs[0].lockingBytecode;\n\n    // Lock this contract to only be used with the registry contract.\n    require(tx.outputs[2].lockingBytecode == parentContractScriptHash);\n    require(tx.inputs[2].lockingBytecode == parentContractScriptHash);\n\n    require(tx.outputs[0].tokenCategory == tx.outputs[2].tokenCategory);\n\n    // Send the tokenAmount to the registry contract\n    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[2].tokenAmount);\n\n    bytes name = tx.inputs[2].nftCommitment.split(20)[1];\n    bytes characterSplitBytes = name.split(characterNumber)[0];\n    characterNumber = characterNumber - 1;\n    bytes character = characterSplitBytes.split(characterNumber)[1];\n    int charVal = int(character);\n\n    // If the character is invalid.\n    require(\n      !within(charVal, 97, 123) ||\n      !within(charVal, 65, 91) ||\n      !within(charVal, 48, 58) ||\n      charVal != 45\n    );\n\n    // Pure BCH\n    require(tx.outputs[2].tokenCategory == 0x);\n  }\n}",
  "debug": {
    "bytecode": "c3539c69c4539c69c0519c69c0c7c0cd876900c752cd5179876952c7517a876900d152d1876900d300d052d0939c6952cf01147f77007a51797f7551795194517a517a7f77007a8100790161017ba59151790141015ba5919b51790130013aa5919b517a012d9e9b6952d1008777",
    "sourceMap": "28:12:28:28;:32::33;:12:::1;:4::35;29:12:29:29:0;:33::34;:12:::1;:4::36;32:12:32:33:0;:37::38;:12:::1;:4::40;33:22:33:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;36:47:36:48:0;:37::65:1;39:23:39:24:0;:12::41:1;:45::69:0;;:12:::1;:4::71;40:22:40:23:0;:12::40:1;:44::68:0;;:12:::1;:4::70;42:23:42:24:0;:12::39:1;:54::55:0;:43::70:1;:12;:4::72;45:23:45:24:0;:12::37:1;:51::52:0;:41::65:1;:78::79:0;:68::92:1;:41;:12;:4::94;47:27:47:28:0;:17::43:1;:50::52:0;:17::53:1;:::56;48:32:48:36:0;;:43::58;;:32::59:1;:::62;49:22:49:37:0;;:40::41;:22:::1;50::50::0;;:48::63;;:22::64:1;:::67;51::51:31:0;;:18::32:1;55:14:55:21:0;;:23::25;:27::30;:7::31:1;:6;56:14:56:21:0;;:23::25;:27::29;:7::30:1;:6;55;57:14:57:21:0;;:23::25;:27::29;:7::30:1;:6;55;58::58:13:0;;:17::19;:6:::1;55;54:4:59:6;62:23:62:24:0;:12::39:1;:43::45:0;:12:::1;27:2:63:3",
    "logs": [],
    "requires": [
      {
        "ip": 3,
        "line": 28
      },
      {
        "ip": 7,
        "line": 29
      },
      {
        "ip": 11,
        "line": 32
      },
      {
        "ip": 17,
        "line": 33
      },
      {
        "ip": 25,
        "line": 39
      },
      {
        "ip": 31,
        "line": 40
      },
      {
        "ip": 37,
        "line": 42
      },
      {
        "ip": 46,
        "line": 45
      },
      {
        "ip": 96,
        "line": 54
      },
      {
        "ip": 101,
        "line": 62
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-07T16:38:56.766Z"
}