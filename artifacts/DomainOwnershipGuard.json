{
  "contractName": "DomainOwnershipGuard",
  "constructorInputs": [
    {
      "name": "domainContractPartialBytecode",
      "type": "bytes"
    },
    {
      "name": "tld",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_3 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_2 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT 14 OP_SPLIT OP_NIP OP_ROT OP_CAT OP_DUP OP_SIZE OP_NIP OP_SWAP OP_CAT OP_SWAP OP_CAT OP_HASH256 aa20 OP_SWAP OP_CAT 87 OP_CAT OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_3 OP_UTXOTOKENAMOUNT OP_ADD OP_NUMEQUAL",
  "source": "pragma cashscript ^0.11.0;\n\ncontract DomainOwnershipGuard(\n  bytes domainContractPartialBytecode,\n  bytes tld\n) {\n  /**\n   * If the Domain being auctions already has an 'externalAuth' NFT, with the same category then the auction is invalid.\n   * Penalizes invalid domain registrations by allowing anyone to burn the auctionNFT and claim the funds as reward.\n   * \n   * @inputs\n   * - Input0: Registry Contract's immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract\n   * - Input2: External Auth NFT from Domain contract\n   * - Input3: auctionNFT\n   * \n   * @outputs\n   * - Output0: Registry Contract's immutable NFT back to the Registry contract\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: External Auth NFT back to Domain contract\n   * - Output3: BCH change/reward to caller\n   */\n  function call(){\n    require(tx.inputs.length == 4);\n    require(tx.outputs.length == 4);\n    \n    // This contract can only be used at input1 and it should return to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n\n    // Lock this contract to only be used with the registry type contract.\n    bytes parentContractScriptHash = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[3].lockingBytecode == parentContractScriptHash);\n\n    bytes parentDomainCategory = tx.inputs[0].tokenCategory;\n    require(tx.inputs[3].tokenCategory == parentDomainCategory);\n\n    require(tx.inputs[2].tokenCategory == parentDomainCategory);\n    require(tx.outputs[2].tokenCategory == parentDomainCategory);\n    require(tx.inputs[2].nftCommitment == tx.outputs[2].nftCommitment);\n    require(tx.inputs[2].nftCommitment == 0x); // Ensure that the externalAuth NFT is use and not the internalAuth NFT.\n\n    bytes fullName = tx.inputs[3].nftCommitment.split(20)[1] + tld;\n    bytes domainBytecode =  bytes(fullName.length) + fullName + domainContractPartialBytecode;\n    bytes32 scriptHash = hash256(domainBytecode);\n    bytes35 domainLockingBytecode = new LockingBytecodeP2SH32(scriptHash);\n    require(tx.inputs[2].lockingBytecode == domainLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == domainLockingBytecode);\n\n    require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount + tx.inputs[3].tokenAmount);\n  }\n}",
  "debug": {
    "bytecode": "c3549c69c4549c69c0519c69c0c7c0cd876900c753c7517a876900ce53ce5179876952ce5179876952d1517a876952cf52d2876952cf00876953cf01147f77527a7e00798277517a7e517a7e007aaa02aa20517a7e01877e52c75179876952cd517a876900d300d053d0939c",
    "sourceMap": "24:12:24:28;:32::33;:12:::1;:4::35;25:12:25:29:0;:33::34;:12:::1;:4::36;28:12:28:33:0;:37::38;:12:::1;:4::40;29:22:29:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;32:47:32:48:0;:37::65:1;33:22:33:23:0;:12::40:1;:44::68:0;;:12:::1;:4::70;35:43:35:44:0;:33::59:1;36:22:36:23:0;:12::38:1;:42::62:0;;:12:::1;:4::64;38:22:38:23:0;:12::38:1;:42::62:0;;:12:::1;:4::64;39:23:39:24:0;:12::39:1;:43::63:0;;:12:::1;:4::65;40:22:40:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;41:22:41:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;43:31:43:32:0;:21::47:1;:54::56:0;:21::57:1;:::60;:63::66:0;;:21:::1;44:34:44:42:0;;:::49:1;;:53::61:0;;:28:::1;:64::93:0;;:28:::1;45:33:45:47:0;;:25::48:1;46:36:46:73:0;:62::72;;:36::73:1;;;47:22:47:23:0;:12::40:1;:44::65:0;;:12:::1;:4::67;48:23:48:24:0;:12::41:1;:45::66:0;;:12:::1;:4::68;50:23:50:24:0;:12::37:1;:51::52:0;:41::65:1;:78::79:0;:68::92:1;:41;:12",
    "logs": [],
    "requires": [
      {
        "ip": 5,
        "line": 24
      },
      {
        "ip": 9,
        "line": 25
      },
      {
        "ip": 13,
        "line": 28
      },
      {
        "ip": 19,
        "line": 29
      },
      {
        "ip": 27,
        "line": 33
      },
      {
        "ip": 35,
        "line": 36
      },
      {
        "ip": 41,
        "line": 38
      },
      {
        "ip": 47,
        "line": 39
      },
      {
        "ip": 53,
        "line": 40
      },
      {
        "ip": 58,
        "line": 41
      },
      {
        "ip": 91,
        "line": 47
      },
      {
        "ip": 97,
        "line": 48
      },
      {
        "ip": 106,
        "line": 50
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.0"
  },
  "updatedAt": "2025-02-07T17:32:49.312Z"
}